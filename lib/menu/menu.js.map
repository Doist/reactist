{"version":3,"file":"menu.js","sources":["../../src/menu/menu.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\n\nimport {\n    Portal,\n    MenuStore,\n    MenuStoreProps,\n    useMenuStore,\n    MenuProps as AriakitMenuProps,\n    Menu as AriakitMenu,\n    MenuGroup as AriakitMenuGroup,\n    MenuItem as AriakitMenuItem,\n    MenuItemProps as AriakitMenuItemProps,\n    MenuButton as AriakitMenuButton,\n    MenuButtonProps as AriakitMenuButtonProps,\n    Role,\n    RoleProps,\n} from '@ariakit/react'\n\nimport './menu.less'\nimport type { ObfuscatedClassName } from '../utils/common-types'\n\ntype MenuContextState = {\n    menuStore: MenuStore | null\n    handleItemSelect?: (value: string | null | undefined) => void\n    getAnchorRect: (() => { x: number; y: number }) | null\n    setAnchorRect: (rect: { x: number; y: number } | null) => void\n}\n\nconst MenuContext = React.createContext<MenuContextState>({\n    menuStore: null,\n    handleItemSelect: () => undefined,\n    getAnchorRect: null,\n    setAnchorRect: () => undefined,\n})\n\n//\n// Menu\n//\n\ninterface MenuProps extends Omit<MenuStoreProps, 'visible'> {\n    /**\n     * The `Menu` must contain a `MenuList` that defines the menu options. It must also contain a\n     * `MenuButton` that triggers the menu to be opened or closed.\n     */\n    children: React.ReactNode\n\n    /**\n     * An optional callback that will be called back whenever a menu item is selected. It receives\n     * the `value` of the selected `MenuItem`.\n     *\n     * If you pass down this callback, it is recommended that you properly memoize it so it does not\n     * change on every render.\n     */\n    onItemSelect?: (value: string | null | undefined) => void\n}\n\n/**\n * Wrapper component to control a menu. It does not render anything, only providing the state\n * management for the menu components inside it.\n */\nfunction Menu({ children, onItemSelect, ...props }: MenuProps) {\n    const [anchorRect, setAnchorRect] = React.useState<{ x: number; y: number } | null>(null)\n    const getAnchorRect = React.useMemo(() => (anchorRect ? () => anchorRect : null), [anchorRect])\n    const menuStore = useMenuStore({ focusLoop: true, ...props })\n\n    const value: MenuContextState = React.useMemo(\n        () => ({ menuStore, handleItemSelect: onItemSelect, getAnchorRect, setAnchorRect }),\n        [menuStore, onItemSelect, getAnchorRect, setAnchorRect],\n    )\n\n    return <MenuContext.Provider value={value}>{children}</MenuContext.Provider>\n}\n\n//\n// MenuButton\n//\n\ninterface MenuButtonProps\n    extends Omit<AriakitMenuButtonProps, 'store' | 'className' | 'as'>,\n        ObfuscatedClassName {}\n\n/**\n * A button to toggle a dropdown menu open or closed.\n */\nconst MenuButton = React.forwardRef<HTMLButtonElement, MenuButtonProps>(function MenuButton(\n    { exceptionallySetClassName, ...props },\n    ref,\n) {\n    const { menuStore } = React.useContext(MenuContext)\n    if (!menuStore) {\n        throw new Error('MenuButton must be wrapped in <Menu/>')\n    }\n    return (\n        <AriakitMenuButton\n            {...props}\n            store={menuStore}\n            ref={ref}\n            className={classNames('reactist_menubutton', exceptionallySetClassName)}\n        />\n    )\n})\n\n//\n// ContextMenuTrigger\n//\n\ninterface ContextMenuTriggerProps\n    extends ObfuscatedClassName,\n        React.HTMLAttributes<HTMLDivElement>,\n        Pick<RoleProps, 'render'> {}\n\nconst ContextMenuTrigger = React.forwardRef<HTMLDivElement, ContextMenuTriggerProps>(\n    function ContextMenuTrigger({ render, ...props }, ref) {\n        const { setAnchorRect, menuStore } = React.useContext(MenuContext)\n        if (!menuStore) {\n            throw new Error('ContextMenuTrigger must be wrapped in <Menu/>')\n        }\n\n        const handleContextMenu = React.useCallback(\n            function handleContextMenu(event: React.MouseEvent) {\n                event.preventDefault()\n                setAnchorRect({ x: event.clientX, y: event.clientY })\n                menuStore.show()\n            },\n            [setAnchorRect, menuStore],\n        )\n\n        const isOpen = menuStore.useState('open')\n        React.useEffect(() => {\n            if (!isOpen) setAnchorRect(null)\n        }, [isOpen, setAnchorRect])\n\n        return <Role.div {...props} onContextMenu={handleContextMenu} ref={ref} render={render} />\n    },\n)\n\n//\n// MenuList\n//\n\ninterface MenuListProps\n    extends Omit<AriakitMenuProps, 'store' | 'className'>,\n        ObfuscatedClassName {}\n\n/**\n * The dropdown menu itself, containing a list of menu items.\n */\nconst MenuList = React.forwardRef<HTMLDivElement, MenuListProps>(function MenuList(\n    { exceptionallySetClassName, modal = true, ...props },\n    ref,\n) {\n    const { menuStore, getAnchorRect } = React.useContext(MenuContext)\n    if (!menuStore) {\n        throw new Error('MenuList must be wrapped in <Menu/>')\n    }\n\n    const isOpen = menuStore.useState('open')\n\n    return isOpen ? (\n        <Portal preserveTabOrder>\n            <AriakitMenu\n                {...props}\n                store={menuStore}\n                gutter={8}\n                shift={4}\n                ref={ref}\n                className={classNames('reactist_menulist', exceptionallySetClassName)}\n                getAnchorRect={getAnchorRect ?? undefined}\n                modal={modal}\n            />\n        </Portal>\n    ) : null\n})\n\n//\n// MenuItem\n//\n\ninterface MenuItemProps extends AriakitMenuItemProps, ObfuscatedClassName {\n    /**\n     * An optional value given to this menu item. It is passed on to the parent `Menu`'s\n     * `onItemSelect` when you provide that instead of (or alongside) providing individual\n     * `onSelect` callbacks to each menu item.\n     */\n    value?: string\n\n    /**\n     * When `true` the menu item is disabled and won't be selectable or be part of the keyboard\n     * navigation across the menu options.\n     *\n     * @default true\n     */\n    disabled?: boolean\n\n    /**\n     * When `true` the menu will close when the menu item is selected, in addition to performing the\n     * action that the menu item is set out to do.\n     *\n     * Set this to `false` to make sure that a given menu item does not auto-closes the menu when\n     * selected. This should be the exception and not the norm, as the default is to auto-close.\n     *\n     * @default true\n     */\n    hideOnSelect?: boolean\n\n    /**\n     * The action to perform when the menu item is selected.\n     *\n     * If you return `false` from this function, the menu will not auto-close when this menu item\n     * is selected. Though you should use `hideOnSelect` for this purpose, this allows you to\n     * achieve the same effect conditionally and dynamically deciding at run time.\n     */\n    onSelect?: () => unknown\n\n    /**\n     * The event handler called when the menu item is clicked.\n     *\n     * This is similar to `onSelect`, but a bit different. You can certainly use it to trigger the\n     * action that the menu item represents. But in general you should prefer `onSelect` for that.\n     *\n     * The main use for this handler is to get access to the click event. This can be used, for\n     * example, to call `event.preventDefault()`, which will effectively prevent the rest of the\n     * consequences of the click, including preventing `onSelect` from being called. In particular,\n     * this is useful in menu items that are links, and you want the click to not trigger navigation\n     * under some circumstances.\n     */\n    onClick?: (event: React.MouseEvent) => void\n}\n\n/**\n * A menu item inside a menu list. It can be selected by the user, triggering the `onSelect`\n * callback.\n */\nconst MenuItem = React.forwardRef<HTMLDivElement, MenuItemProps>(function MenuItem(\n    {\n        value,\n        children,\n        onSelect,\n        hideOnSelect = true,\n        onClick,\n        exceptionallySetClassName,\n        ...props\n    },\n    ref,\n) {\n    const { handleItemSelect, menuStore } = React.useContext(MenuContext)\n    if (!menuStore) {\n        throw new Error('MenuItem must be wrapped in <Menu/>')\n    }\n\n    const { hide } = menuStore\n    const handleClick = React.useCallback(\n        function handleClick(event: React.MouseEvent) {\n            onClick?.(event)\n            const onSelectResult: unknown =\n                onSelect && !event.defaultPrevented ? onSelect() : undefined\n            const shouldClose = onSelectResult !== false && hideOnSelect\n            handleItemSelect?.(value)\n            if (shouldClose) hide()\n        },\n        [onSelect, onClick, handleItemSelect, hideOnSelect, hide, value],\n    )\n\n    return (\n        <AriakitMenuItem\n            {...props}\n            store={menuStore}\n            ref={ref}\n            onClick={handleClick}\n            className={exceptionallySetClassName}\n            hideOnClick={false}\n        >\n            {children}\n        </AriakitMenuItem>\n    )\n})\n\n//\n// SubMenu\n//\n\ntype SubMenuProps = Pick<MenuProps, 'children' | 'onItemSelect'>\n\n/**\n * This component can be rendered alongside other `MenuItem` inside a `MenuList` in order to have\n * a sub-menu.\n *\n * Its children are expected to have the structure of a first level menu (a `MenuButton` and a\n * `MenuList`).\n *\n * ```jsx\n * <MenuItem label=\"Edit profile\" />\n * <SubMenu>\n *   <MenuButton>More options</MenuButton>\n *   <MenuList>\n *     <MenuItem label=\"Preferences\" />\n *     <MenuItem label=\"Sign out\" />\n *   </MenuList>\n * </SubMenu>\n * ```\n *\n * The `MenuButton` will become a menu item in the current menu items list, and it will lead to\n * opening a sub-menu with the menu items list below it.\n */\nconst SubMenu = React.forwardRef<HTMLDivElement, SubMenuProps>(function SubMenu(\n    { children, onItemSelect },\n    ref,\n) {\n    const { handleItemSelect: parentMenuItemSelect, menuStore } = React.useContext(MenuContext)\n    if (!menuStore) {\n        throw new Error('SubMenu must be wrapped in <Menu/>')\n    }\n\n    const { hide: parentMenuHide } = menuStore\n    const handleSubItemSelect = React.useCallback(\n        function handleSubItemSelect(value: string | null | undefined) {\n            onItemSelect?.(value)\n            parentMenuItemSelect?.(value)\n            parentMenuHide()\n        },\n        [parentMenuHide, parentMenuItemSelect, onItemSelect],\n    )\n\n    const [button, list] = React.Children.toArray(children)\n    const buttonElement = button as React.ReactElement<MenuButtonProps>\n\n    return (\n        <Menu onItemSelect={handleSubItemSelect}>\n            <AriakitMenuItem store={menuStore} ref={ref} hideOnClick={false} render={buttonElement}>\n                {buttonElement.props.children}\n            </AriakitMenuItem>\n            {list}\n        </Menu>\n    )\n})\n\n//\n// MenuGroup\n//\n\ninterface MenuGroupProps\n    extends Omit<React.HTMLAttributes<HTMLDivElement>, 'className'>,\n        ObfuscatedClassName {\n    /**\n     * A label to be shown visually and also used to semantically label the group.\n     */\n    label: string\n}\n\n/**\n * A way to semantically group some menu items.\n *\n * This group does not add any visual separator. You can do that yourself adding `<hr />` elements\n * before and/or after the group if you so wish.\n */\nconst MenuGroup = React.forwardRef<HTMLDivElement, MenuGroupProps>(function MenuGroup(\n    { label, children, exceptionallySetClassName, ...props },\n    ref,\n) {\n    const { menuStore } = React.useContext(MenuContext)\n    if (!menuStore) {\n        throw new Error('MenuGroup must be wrapped in <Menu/>')\n    }\n\n    return (\n        <AriakitMenuGroup\n            {...props}\n            ref={ref}\n            store={menuStore}\n            className={exceptionallySetClassName}\n        >\n            {label ? (\n                <div role=\"presentation\" className=\"reactist_menugroup__label\">\n                    {label}\n                </div>\n            ) : null}\n            {children}\n        </AriakitMenuGroup>\n    )\n})\n\nexport { ContextMenuTrigger, Menu, MenuButton, MenuList, MenuItem, SubMenu, MenuGroup }\nexport type { MenuButtonProps, MenuListProps, MenuItemProps, MenuGroupProps }\n"],"names":["MenuContext","React","createContext","menuStore","handleItemSelect","getAnchorRect","setAnchorRect","Menu","_ref","children","onItemSelect","props","_objectWithoutProperties","objectWithoutProperties","_excluded","anchorRect","useState","useMemo","useMenuStore","_objectSpread","focusLoop","value","createElement","Provider","MenuButton","forwardRef","ref","exceptionallySetClassName","_ref2","_excluded2","useContext","Error","AriakitMenuButton","store","className","classNames","ContextMenuTrigger","render","_ref3","_excluded3","handleContextMenu","useCallback","event","preventDefault","x","clientX","y","clientY","show","isOpen","useEffect","Role","div","onContextMenu","MenuList","modal","_ref4","_excluded4","Portal","preserveTabOrder","AriakitMenu","gutter","shift","undefined","MenuItem","onSelect","hideOnSelect","onClick","_ref5","_excluded5","hide","handleClick","shouldClose","defaultPrevented","AriakitMenuItem","hideOnClick","SubMenu","parentMenuItemSelect","parentMenuHide","handleSubItemSelect","button","list","Children","toArray","MenuGroup","label","_ref6","_excluded6","AriakitMenuGroup","role"],"mappings":"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"}