{"version":3,"file":"keyboard-shortcut.js","sources":["../../../src/components/keyboard-shortcut/keyboard-shortcut.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\n\n//\n// Support for setting up how to translate modifiers globally.\n//\n\nlet globalTranslateKey = (key: string) => key\n\ntype TranslateKey = typeof globalTranslateKey\n\nKeyboardShortcut.setTranslateKey = (tr: TranslateKey) => {\n    globalTranslateKey = tr\n}\n\nfunction translateKeyMac(key: string) {\n    switch (key.toLowerCase()) {\n        case 'cmd':\n        case 'mod':\n            return '⌘'\n        case 'control':\n        case 'ctrl':\n            return '⌃'\n        case 'alt':\n            return '⌥'\n        case 'shift':\n            return '⇧'\n        case 'space':\n            return '␣'\n        default:\n            return key\n    }\n}\n\n//\n// Some helpers\n//\n\nfunction capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n}\n\nfunction hasModifiers(str: string) {\n    return /\\b(mod|cmd|ctrl|control|alt|shift)\\b/i.test(str)\n}\n\nfunction isSpecialKey(str: string) {\n    return /^(mod|cmd|ctrl|control|alt|shift|space|super)$/i.test(str)\n}\n\nfunction parseKeys(shortcut: string, isMac: boolean, translateKey: TranslateKey) {\n    const t = isMac ? translateKeyMac : translateKey\n    const _hasModifiers = hasModifiers(shortcut)\n\n    function mapIndividualKey(str: string) {\n        if (isSpecialKey(str)) {\n            return capitalize(t(str))\n        }\n        if (_hasModifiers && str.length === 1) {\n            return str.toUpperCase()\n        }\n        return str\n    }\n\n    if (!isMac) {\n        shortcut = shortcut.replace(/\\b(mod|cmd)\\b/i, 'ctrl')\n    }\n\n    return shortcut.split(/\\s*\\+\\s*/).map(mapIndividualKey)\n}\n\n//\n// The KeyboardShortcut component\n//\n\ntype NativeSpanProps = React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLSpanElement>,\n    HTMLSpanElement\n>\n\ntype Props = Omit<NativeSpanProps, 'children'> & {\n    /**\n     * The shortcut to be represented as markup. It supports an intuitive syntax where you can\n     * combine modifiers (cmd, ctrl, shift, alt) with single keys all concatenated with plus signs.\n     * You can also pass various shortcuts as an array, which will be depicted separated by commas.\n     */\n    children: string | string[]\n    /**\n     * A function that allows you to change how some key names are represented. This may be useful,\n     * for instance, to translate modifier names that are expressed differently in other languages\n     * (e.g. `Ctrl` is named `Strg` in German).\n     *\n     * It defaults to a global version that leaves the key as is. You can pass your version as a\n     * prop, or you can also set your own version of this global default one, so you don't need to\n     * pass your own on each invocation of this component.\n     *\n     * ```js\n     * import { KeyboardShortcut } from '@doist/reactist'\n     * KeyboardShortcut.setTranslateKey = key => { ... }\n     * ```\n     *\n     * Note: When the component detects the macOS operating system it bypasses key translation for\n     * most modifiers and uses macOS-specific symbols. See the `isMac` prop for details.\n     */\n    translateKey?: TranslateKey\n    /**\n     * This prop is not meant to be passed. The component will automatically initialize it to `true`\n     * if it detects that the current browser / operating system is on macOS, in which case modifier\n     * keys are represented using macOS' notation (e.g. ⌘ ⌃ ⌥ ⇧).\n     *\n     * Though it is discouraged, if you don't want this special treatment in macOS, you can pass\n     * `isMac={false}` in all invocations of this component.\n     */\n    isMac?: boolean\n}\n\nfunction KeyboardShortcut({\n    children,\n    className,\n    translateKey = globalTranslateKey,\n    isMac = navigator.platform?.toUpperCase().includes('MAC') ?? false,\n    ...props\n}: Props) {\n    const shortcuts = typeof children === 'string' ? [children] : children\n    return (\n        <span\n            className={classNames('reactist_keyboard_shortcut', className, {\n                'reactist_keyboard_shortcut--macos': isMac,\n            })}\n            {...props}\n        >\n            {shortcuts.map((shortcut, i) => (\n                <React.Fragment key={i}>\n                    {i === 0 ? null : ', '}\n                    <kbd>\n                        {parseKeys(shortcut, isMac, translateKey).map((key, j) => (\n                            <kbd key={j}>{key}</kbd>\n                        ))}\n                    </kbd>\n                </React.Fragment>\n            ))}\n        </span>\n    )\n}\n\nexport { KeyboardShortcut }\n"],"names":["globalTranslateKey","key","translateKeyMac","toLowerCase","KeyboardShortcut","_ref","_navigator$platform$t","_navigator$platform","children","className","translateKey","isMac","navigator","platform","toUpperCase","includes","props","_objectWithoutProperties","objectWithoutProperties","_excluded","shortcuts","React","_objectSpread","classNames","reactist_keyboard_shortcut--macos","map","shortcut","i","createElement","Fragment","t","_hasModifiers","test","replace","split","str","isSpecialKey","charAt","slice","capitalize","length","parseKeys","j","setTranslateKey","tr"],"mappings":"8kBAOA,IAAIA,EAAsBC,GAAgBA,EAQ1C,SAASC,EAAgBD,GACrB,OAAQA,EAAIE,eACR,IAAK,MACL,IAAK,MACD,MAAO,IACX,IAAK,UACL,IAAK,OACD,MAAO,IACX,IAAK,MACD,MAAO,IACX,IAAK,QACD,MAAO,IACX,IAAK,QACD,MAAO,IACX,QACI,OAAOF,GAsFnB,SAASG,EAMDC,GAAA,IAAAC,EAAAC,EAAA,IANkBC,SACtBA,EADsBC,UAEtBA,EAFsBC,aAGtBA,EAAeV,EAHOW,MAItBA,EAA6D,OAArDC,EAAA,OAAAA,EAAAA,UAAUC,eAAV,EAAAN,EAAoBO,cAAcC,SAAS,SAAUT,GAEzDD,EADDW,EACCC,EAAAC,wBAAAb,EAAAc,GACJ,MAAMC,EAAgC,iBAAbZ,EAAwB,CAACA,GAAYA,EAC9D,OACIa,uBAAAC,gBAAA,CACIb,UAAWc,EAAAA,QAAW,6BAA8Bd,EAAW,CAC3De,oCAAqCb,KAErCK,GAEHI,EAAUK,IAAI,CAACC,EAAUC,IACtBN,EAACO,cAAAP,EAAMQ,SAAQ,CAAC5B,IAAK0B,GACV,IAANA,EAAU,KAAO,KAClBN,EAAAO,cAAA,MAAA,KApFpB,SAAmBF,EAAkBf,EAAgBD,GACjD,MAAMoB,EAAInB,EAAQT,EAAkBQ,EAC9BqB,EATC,wCAAwCC,KASZN,GAgBnC,OAJKf,IACDe,EAAWA,EAASO,QAAQ,iBAAkB,SAG3CP,EAASQ,MAAM,YAAYT,KAdlC,SAA0BU,GACtB,OATR,SAAsBA,GAClB,MAAO,kDAAkDH,KAAKG,GAQtDC,CAAaD,GAjBzB,SAAoBA,GAChB,OAAOA,EAAIE,OAAO,GAAGvB,cAAgBqB,EAAIG,MAAM,GAAGnC,cAiBnCoC,CAAWT,EAAEK,IAEpBJ,GAAgC,IAAfI,EAAIK,OACdL,EAAIrB,cAERqB,KA0EUM,CAAUf,EAAUf,EAAOD,GAAce,IAAI,CAACxB,EAAKyC,IAChDrB,EAAKO,cAAA,MAAA,CAAA3B,IAAKyC,GAAIzC,QA7H1CG,EAAiBuC,gBAAmBC,IAChC5C,EAAqB4C"}