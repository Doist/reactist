{"version":3,"file":"key-capturer.js","sources":["../../../src/components/key-capturer/key-capturer.tsx"],"sourcesContent":["import * as React from 'react'\n\ntype Key = 'ArrowUp' | 'ArrowRight' | 'ArrowDown' | 'ArrowLeft' | 'Enter' | 'Backspace' | 'Escape'\n\nconst SUPPORTED_KEYS: Record<string, Key> = {\n    ARROW_UP: 'ArrowUp',\n    ARROW_RIGHT: 'ArrowRight',\n    ARROW_DOWN: 'ArrowDown',\n    ARROW_LEFT: 'ArrowLeft',\n    ENTER: 'Enter',\n    BACKSPACE: 'Backspace',\n    ESCAPE: 'Escape',\n}\n\nconst KeyCapturerResolver = {\n    resolveByKey(eventKey: string): Key | null {\n        switch (eventKey) {\n            case 'Left': // IE specific\n            case 'ArrowLeft': {\n                return 'ArrowLeft'\n            }\n            case 'Up': // IE specific\n            case 'ArrowUp': {\n                return 'ArrowUp'\n            }\n            case 'Right': // IE specific\n            case 'ArrowRight': {\n                return 'ArrowRight'\n            }\n            case 'Down': // IE specific\n            case 'ArrowDown': {\n                return 'ArrowDown'\n            }\n            case 'Enter': {\n                return 'Enter'\n            }\n            case 'Backspace': {\n                return 'Backspace'\n            }\n            case 'Esc': // IE specific\n            case 'Escape': {\n                return 'Escape'\n            }\n            default: {\n                return null\n            }\n        }\n    },\n\n    resolveByKeyCode(keyCode: number): Key | null {\n        switch (keyCode) {\n            case 37: {\n                return 'ArrowLeft'\n            }\n            case 38: {\n                return 'ArrowUp'\n            }\n            case 39: {\n                return 'ArrowRight'\n            }\n            case 40: {\n                return 'ArrowDown'\n            }\n            case 13: {\n                return 'Enter'\n            }\n            case 8: {\n                return 'Backspace'\n            }\n            case 27: {\n                return 'Escape'\n            }\n            default: {\n                return null\n            }\n        }\n    },\n}\n\ntype EventHandler = (event: React.SyntheticEvent) => void\n\ntype EventHandlerProps = {\n    onArrowUp?: EventHandler\n    onArrowDown?: EventHandler\n    onArrowLeft?: EventHandler\n    onArrowRight?: EventHandler\n    onEnter?: EventHandler\n    onBackspace?: EventHandler\n    onEscape?: EventHandler\n}\n\ntype PropagateProps = {\n    propagateArrowUp?: boolean\n    propagateArrowDown?: boolean\n    propagateArrowLeft?: boolean\n    propagateArrowRight?: boolean\n    propagateEnter?: boolean\n    propagateBackspace?: boolean\n    propagateEscape?: boolean\n}\n\nconst keyEventHandlerMapping: Record<Key, keyof EventHandlerProps> = {\n    ArrowUp: 'onArrowUp',\n    ArrowDown: 'onArrowDown',\n    ArrowLeft: 'onArrowLeft',\n    ArrowRight: 'onArrowRight',\n    Enter: 'onEnter',\n    Backspace: 'onBackspace',\n    Escape: 'onEscape',\n}\n\nconst keyPropagatePropMapping: Record<Key, keyof PropagateProps> = {\n    ArrowUp: 'propagateArrowUp',\n    ArrowDown: 'propagateArrowDown',\n    ArrowLeft: 'propagateArrowLeft',\n    ArrowRight: 'propagateArrowRight',\n    Enter: 'propagateEnter',\n    Backspace: 'propagateBackspace',\n    Escape: 'propagateEscape',\n}\n\ntype KeyCapturerProps = EventHandlerProps &\n    PropagateProps & {\n        eventName?: 'onKeyDown' | 'onKeyDownCapture' | 'onKeyUp' | 'onKeyUpCapture'\n        children: React.ReactElement<unknown>\n    }\n\n/**\n * Use this component to wrap anything you want to handle key events for (e.g. an input).\n * You can specify the `eventName` to capture (defaults to `onKeyDown`).\n * Check the SUPPORTED_KEYS map to see which keys are supported and supply the respective\n * `on${Key}` prop (i.e. `onEnter` or `onArrowDown`).\n * If you want the default behaviour to be preserved (i.e. only want to hook into the event\n * instead of replacing it) set the `propagate${Key}` prop (e.g. propagateBackspace).\n */\nfunction KeyCapturer(props: KeyCapturerProps) {\n    const { children, eventName = 'onKeyDown' } = props\n    const composingRef = React.useRef(false)\n    const composingEventHandlers = props.onEnter\n        ? {\n              onCompositionStart: () => {\n                  composingRef.current = true\n              },\n              onCompositionEnd: () => {\n                  composingRef.current = false\n              },\n          }\n        : undefined\n\n    function handleKeyEvent(event: React.KeyboardEvent<HTMLInputElement>) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n        const key =\n            event.key !== undefined\n                ? KeyCapturerResolver.resolveByKey(event.key)\n                : KeyCapturerResolver.resolveByKeyCode(event.keyCode)\n\n        if (!key) return\n        const propagateEvent = props[keyPropagatePropMapping[key]] || false\n        const eventHandler = props[keyEventHandlerMapping[key]]\n\n        if (key === 'Enter' && eventHandler) {\n            if (\n                composingRef.current ||\n                // Safari fires the onCompositionEnd event before the keydown event, so we\n                // have to rely on the 229 keycode, which is Enter when fired from an IME\n                // https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n                (event.keyCode || event.which) === 229\n            ) {\n                return\n            }\n        }\n\n        if (eventHandler) {\n            eventHandler(event)\n            if (!propagateEvent) {\n                event.preventDefault()\n                event.stopPropagation()\n            }\n        }\n    }\n\n    return React.cloneElement(children, {\n        [eventName]: handleKeyEvent,\n        ...composingEventHandlers,\n    })\n}\n\nexport { KeyCapturer, KeyCapturerResolver, SUPPORTED_KEYS }\n"],"names":["KeyCapturerResolver","resolveByKey","eventKey","resolveByKeyCode","keyCode","keyEventHandlerMapping","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Enter","Backspace","Escape","keyPropagatePropMapping","props","children","eventName","composingRef","React","useRef","cloneElement","_objectSpread","[object Object]","event","key","undefined","propagateEvent","eventHandler","current","which","preventDefault","stopPropagation","onEnter","onCompositionStart","onCompositionEnd","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","BACKSPACE","ESCAPE"],"mappings":"2aAIA,MAUMA,EAAsB,CACxBC,aAAaC,GACT,OAAQA,GACJ,IAAK,OACL,IAAK,YACD,MAAO,YAEX,IAAK,KACL,IAAK,UACD,MAAO,UAEX,IAAK,QACL,IAAK,aACD,MAAO,aAEX,IAAK,OACL,IAAK,YACD,MAAO,YAEX,IAAK,QACD,MAAO,QAEX,IAAK,YACD,MAAO,YAEX,IAAK,MACL,IAAK,SACD,MAAO,SAEX,QACI,OAAO,OAKnBC,iBAAiBC,GACb,OAAQA,GACJ,KAAK,GACD,MAAO,YAEX,KAAK,GACD,MAAO,UAEX,KAAK,GACD,MAAO,aAEX,KAAK,GACD,MAAO,YAEX,KAAK,GACD,MAAO,QAEX,KAAK,EACD,MAAO,YAEX,KAAK,GACD,MAAO,SAEX,QACI,OAAO,QA4BjBC,EAA+D,CACjEC,QAAS,YACTC,UAAW,cACXC,UAAW,cACXC,WAAY,eACZC,MAAO,UACPC,UAAW,cACXC,OAAQ,YAGNC,EAA6D,CAC/DP,QAAS,mBACTC,UAAW,qBACXC,UAAW,qBACXC,WAAY,sBACZC,MAAO,iBACPC,UAAW,qBACXC,OAAQ,uCAiBZ,SAAqBE,GACjB,MAAMC,SAAEA,EAAFC,UAAYA,EAAY,aAAgBF,EACxCG,EAAeC,EAAMC,QAAO,GA4ClC,OAAOD,EAAME,aAAaL,EAAnBM,gBAAA,CACHC,CAACN,GAjCL,SAAwBO,GAEpB,MAAMC,OACYC,IAAdF,EAAMC,IACAxB,EAAoBC,aAAasB,EAAMC,KACvCxB,EAAoBG,iBAAiBoB,EAAMnB,SAErD,IAAKoB,EAAK,OACV,MAAME,EAAiBZ,EAAMD,EAAwBW,MAAS,EACxDG,EAAeb,EAAMT,EAAuBmB,IAEtC,UAARA,GAAmBG,IAEfV,EAAaW,SAIsB,OAAlCL,EAAMnB,SAAWmB,EAAMM,SAM5BF,IACAA,EAAaJ,GACRG,IACDH,EAAMO,iBACNP,EAAMQ,sBAtCajB,EAAMkB,QAC/B,CACIC,mBAAoB,KAChBhB,EAAaW,SAAU,GAE3BM,iBAAkB,KACdjB,EAAaW,SAAU,SAG/BH,0DA/IkC,CACxCU,SAAU,UACVC,YAAa,aACbC,WAAY,YACZC,WAAY,YACZC,MAAO,QACPC,UAAW,YACXC,OAAQ"}