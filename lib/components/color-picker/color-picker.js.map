{"version":3,"file":"color-picker.js","sources":["../../../src/components/color-picker/color-picker.tsx"],"sourcesContent":["import * as React from 'react'\nimport classnames from 'classnames'\n\nimport DeprecatedDropdown from '../deprecated-dropdown'\nimport { Tooltip } from '../../tooltip'\n\nimport './color-picker.less'\n\ntype NamedColor = { name: string; color: string }\n\nconst COLORS = [\n    '#606060',\n    '#4A90E2',\n    '#03B3B2',\n    '#008299',\n    '#82BA00',\n    '#D24726',\n    '#AC193D',\n    '#DC4FAD',\n    '#3BD5FB',\n    '#74E8D3',\n    '#FFCC00',\n    '#FB886E',\n    '#CCCCCC',\n]\n\nconst _isNamedColor = (color: string | NamedColor | undefined): color is NamedColor =>\n    typeof color !== 'string'\n\nconst _getColor = (colorList: (string | NamedColor)[], colorIndex: number) => {\n    const index = colorIndex >= colorList.length ? 0 : colorIndex\n    return colorList[index]\n}\n\ntype Props = {\n    small?: boolean\n    color?: number\n    onChange?: (color: number) => void\n    colorList?: (string | NamedColor)[]\n}\n\nfunction ColorPicker({ color = 0, small, onChange, colorList = COLORS }: Props) {\n    return (\n        <DeprecatedDropdown.Box right className=\"reactist_color_picker\">\n            <DeprecatedDropdown.Trigger>\n                {(() => {\n                    const backgroundColor = _getColor(colorList, color)\n\n                    return (\n                        <span\n                            className={classnames('color_trigger', { small })}\n                            style={{\n                                backgroundColor: _isNamedColor(backgroundColor)\n                                    ? backgroundColor.color\n                                    : backgroundColor,\n                            }}\n                        >\n                            <span className=\"color_trigger--inner_ring\" />\n                        </span>\n                    )\n                })()}\n            </DeprecatedDropdown.Trigger>\n            <DeprecatedDropdown.Body>\n                <div className=\"color_options\">\n                    {colorList.reduce<React.ReactNode[]>((items, currentColor, currentIndex) => {\n                        items.push(\n                            <ColorItem\n                                isActive={\n                                    color >= colorList.length\n                                        ? currentIndex === 0\n                                        : currentIndex === color\n                                }\n                                key={currentIndex}\n                                color={\n                                    _isNamedColor(currentColor) ? currentColor.color : currentColor\n                                }\n                                colorIndex={currentIndex}\n                                onClick={onChange}\n                                tooltip={_isNamedColor(currentColor) ? currentColor.name : null}\n                            />,\n                        )\n                        return items\n                    }, [])}\n                </div>\n            </DeprecatedDropdown.Body>\n        </DeprecatedDropdown.Box>\n    )\n}\nColorPicker.displayName = 'ColorPicker'\n\ntype ColorItemProps = {\n    color: string\n    colorIndex: number\n    isActive?: boolean\n    onClick?: (colorIndex: number) => void\n    tooltip?: React.ReactNode\n}\n\nfunction ColorItem({ color, colorIndex, isActive, onClick, tooltip }: ColorItemProps) {\n    const item = (\n        <span\n            data-testid=\"reactist-color-item\"\n            className={'reactist color_item' + (isActive ? ' active' : '')}\n            style={{ backgroundColor: color }}\n            onClick={() => onClick?.(colorIndex)}\n        >\n            <span className=\"color_item--inner_ring\" />\n        </span>\n    )\n\n    return tooltip ? <Tooltip content={tooltip}>{item}</Tooltip> : item\n}\nColorItem.displayName = 'ColorItem'\n\nexport { ColorPicker, ColorItem, COLORS }\n"],"names":["COLORS","_isNamedColor","color","ColorPicker","small","onChange","colorList","React","createElement","DeprecatedDropdown","Dropdown","Box","right","className","Trigger","backgroundColor","colorIndex","length","_getColor","classnames","style","Body","reduce","items","currentColor","currentIndex","push","ColorItem","isActive","key","onClick","tooltip","name","item","data-testid","Tooltip","content","displayName"],"mappings":"mjBAUA,MAAMA,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEC,EAAiBC,GACF,iBAAVA,EAcX,SAASC,GAAYD,MAAEA,EAAQ,EAAVE,MAAaA,EAAbC,SAAoBA,EAApBC,UAA8BA,EAAYN,IAC3D,OACIO,EAACC,cAAAC,EAAkBC,SAACC,KAAIC,OAAK,EAACC,UAAU,yBACpCN,EAAAC,cAACC,EAAAA,SAAmBK,QACf,KAAA,MACG,MAAMC,EAjBR,EAACT,EAAoCU,IAE5CV,EADOU,GAAcV,EAAUW,OAAS,EAAID,GAgBXE,CAAUZ,EAAWJ,GAE7C,OACIK,EAAAC,cAAA,OAAA,CACIK,UAAWM,EAAU,QAAC,gBAAiB,CAAEf,MAAAA,IACzCgB,MAAO,CACHL,gBAAiBd,EAAcc,GACzBA,EAAgBb,MAChBa,IAGVR,EAAAC,cAAA,OAAA,CAAMK,UAAU,gCAZ3B,IAiBLN,EAACC,cAAAC,EAAkBC,SAACW,KAAI,KACpBd,EAAAC,cAAA,MAAA,CAAKK,UAAU,iBACVP,EAAUgB,OAA0B,CAACC,EAAOC,EAAcC,KACvDF,EAAMG,KACFnB,EAAAC,cAACmB,EAAS,CACNC,SACI1B,GAASI,EAAUW,OACI,IAAjBQ,EACAA,IAAiBvB,EAE3B2B,IAAKJ,EACLvB,MACID,EAAcuB,GAAgBA,EAAatB,MAAQsB,EAEvDR,WAAYS,EACZK,QAASzB,EACT0B,QAAS9B,EAAcuB,GAAgBA,EAAaQ,KAAO,QAG5DT,GACR,OAgBvB,SAASI,GAAUzB,MAAEA,EAAFc,WAASA,EAATY,SAAqBA,EAArBE,QAA+BA,EAASC,QAAAA,IACvD,MAAME,EACF1B,EACgBC,cAAA,OAAA,CAAA0B,cAAA,sBACZrB,UAAW,uBAAyBe,EAAW,UAAY,IAC3DR,MAAO,CAAEL,gBAAiBb,GAC1B4B,QAAS,IAAMA,MAAAA,OAAAA,EAAAA,EAAUd,IAEzBT,EAAAC,cAAA,OAAA,CAAMK,UAAU,4BAIxB,OAAOkB,EAAUxB,EAAAC,cAAC2B,UAAQ,CAAAC,QAASL,GAAUE,GAAkBA,EAtBnE9B,EAAYkC,YAAc,cAwB1BV,EAAUU,YAAc"}