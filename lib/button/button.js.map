{"version":3,"file":"button.js","sources":["../../src/button/button.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\nimport { Role, RoleProps } from '@ariakit/react'\n\nimport { Box, getBoxClassNames } from '../box'\nimport { Spinner } from '../spinner'\nimport { Tooltip, TooltipProps } from '../tooltip'\n\nimport styles from './button.module.css'\n\nimport type { ObfuscatedClassName } from '../utils/common-types'\n\nfunction preventDefault(event: React.SyntheticEvent) {\n    event.preventDefault()\n}\n\ntype ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'quaternary'\ntype ButtonTone = 'normal' | 'destructive'\ntype ButtonSize = 'small' | 'normal' | 'large'\ntype IconElement = React.ReactElement | string\n\ninterface CommonButtonProps\n    extends ObfuscatedClassName,\n        Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'className'>,\n        Pick<RoleProps, 'render'> {\n    /**\n     * The button's variant.\n     */\n    variant: ButtonVariant\n\n    /**\n     * The button's tone.\n     *\n     * @default 'normal'\n     */\n    tone?: ButtonTone\n\n    /**\n     * The button's size.\n     *\n     * @default 'normal'\n     */\n    size?: ButtonSize\n\n    /**\n     * Controls the shape of the button.\n     *\n     * Specifically, it allows to make it have slightly curved corners (the default) vs. having them\n     * fully curved to the point that they are as round as possible.\n     *\n     * In icon-only buttons this allows to have the button be circular.\n     *\n     * @default 'normal'\n     */\n    shape?: 'normal' | 'rounded'\n\n    /**\n     * Whether the button is disabled or not.\n     *\n     * Buttons are disabled using aria-disabled, rather than the HTML disabled attribute. This\n     * allows the buttons to be focusable, which can aid discoverability. This way, users can tab to\n     * the button and read its label, even if they can't activate it.\n     *\n     * It is also convenient when buttons are rendered as a link. Links cannot normally be disabled,\n     * but by using aria-disabled, we can make them behave as if they were.\n     *\n     * The `onClick` handler is automatically prevented when the button is disabled in this way, to\n     * mimic the behavior of a native disabled attribute.\n     *\n     * @default false\n     */\n    disabled?: boolean\n\n    /**\n     * Whether the button is busy/loading.\n     *\n     * A button in this state is functionally and semantically disabled. Visually is does not look\n     * dimmed (as disabled buttons normally do), but it shows a loading spinner instead.\n     *\n     * @default false\n     */\n    loading?: boolean\n\n    /**\n     * A tooltip linked to the button element.\n     */\n    tooltip?: TooltipProps['content']\n\n    /**\n     * The type of the button.\n     *\n     * @default 'button'\n     */\n    type?: 'button' | 'submit' | 'reset'\n}\n\ninterface ButtonProps extends CommonButtonProps {\n    /**\n     * The button label content.\n     */\n    children?: React.ReactNode\n\n    /**\n     * The icon to display at the start of the button (before the label).\n     */\n    startIcon?: IconElement\n\n    /**\n     * The icon to display at the end of the button (after the label).\n     */\n    endIcon?: IconElement\n\n    /**\n     * The width of the button.\n     *\n     * - `'auto'`: The button will be as wide as its content.\n     * - `'full'`: The button will be as wide as its container.\n     *\n     * @default 'auto'\n     */\n    width?: 'auto' | 'full'\n\n    /**\n     * The alignment of the button label inside the button.\n     *\n     * @default 'center'\n     */\n    align?: 'start' | 'center' | 'end'\n}\n\n/**\n * A button element that displays a text label and optionally a start or end icon. It follows the\n * [WAI-ARIA Button Pattern](https://www.w3.org/TR/wai-aria-practices/#button).\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(function Button(\n    {\n        variant,\n        tone = 'normal',\n        size = 'normal',\n        shape = 'normal',\n        type = 'button',\n        disabled = false,\n        loading = false,\n        tooltip,\n        render,\n        onClick,\n        exceptionallySetClassName,\n        children,\n        startIcon,\n        endIcon,\n        width = 'auto',\n        align = 'center',\n        ...props\n    },\n    ref,\n) {\n    const isDisabled = loading || disabled\n    const buttonElement = (\n        <Role.button\n            {...props}\n            render={render}\n            type={render != null ? undefined : type}\n            ref={ref}\n            aria-disabled={isDisabled}\n            onClick={isDisabled ? preventDefault : onClick}\n            className={classNames([\n                getBoxClassNames({ width }),\n                exceptionallySetClassName,\n                styles.baseButton,\n                styles[`variant-${variant}`],\n                styles[`tone-${tone}`],\n                styles[`size-${size}`],\n                shape === 'rounded' ? styles['shape-rounded'] : null,\n                disabled ? styles.disabled : null,\n            ])}\n        >\n            <>\n                {startIcon ? (\n                    <Box display=\"flex\" className={styles.startIcon} aria-hidden>\n                        {loading && !endIcon ? <Spinner /> : startIcon}\n                    </Box>\n                ) : null}\n\n                {children ? (\n                    <Box\n                        as=\"span\"\n                        className={styles.label}\n                        overflow=\"hidden\"\n                        width={width === 'full' ? 'full' : undefined}\n                        textAlign={width === 'auto' ? 'center' : align}\n                    >\n                        {children}\n                    </Box>\n                ) : null}\n\n                {endIcon || (loading && !startIcon) ? (\n                    <Box display=\"flex\" className={styles.endIcon} aria-hidden>\n                        {loading ? <Spinner /> : endIcon}\n                    </Box>\n                ) : null}\n            </>\n        </Role.button>\n    )\n\n    return tooltip ? <Tooltip content={tooltip}>{buttonElement}</Tooltip> : buttonElement\n})\n\ninterface IconButtonProps extends CommonButtonProps {\n    /**\n     * The icon to display inside the button.\n     */\n    icon: IconElement\n\n    /**\n     * The button label.\n     *\n     * It is used for assistive technologies, and it is also shown as a tooltip (if not tooltip is\n     * provided explicitly).\n     */\n    'aria-label': string\n}\n\n/**\n * A button element that displays an icon only, visually, though it is semantically labelled. It\n * also makes sure to always show a tooltip with its label. It follows the\n * [WAI-ARIA Button Pattern](https://www.w3.org/TR/wai-aria-practices/#button).\n */\nconst IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(function IconButton(\n    {\n        variant,\n        tone = 'normal',\n        size = 'normal',\n        shape = 'normal',\n        type = 'button',\n        disabled = false,\n        loading = false,\n        tooltip,\n        render,\n        onClick,\n        exceptionallySetClassName,\n        children,\n        icon,\n        ...props\n    },\n    ref,\n) {\n    const isDisabled = loading || disabled\n    const buttonElement = (\n        <Role.button\n            {...props}\n            render={render}\n            type={render != null ? undefined : type}\n            ref={ref}\n            aria-disabled={isDisabled}\n            onClick={isDisabled ? preventDefault : onClick}\n            className={classNames([\n                exceptionallySetClassName,\n                styles.baseButton,\n                styles[`variant-${variant}`],\n                styles[`tone-${tone}`],\n                styles[`size-${size}`],\n                shape === 'rounded' ? styles['shape-rounded'] : null,\n                styles.iconButton,\n                disabled ? styles.disabled : null,\n            ])}\n        >\n            {(loading && <Spinner />) || icon}\n        </Role.button>\n    )\n\n    const tooltipContent = tooltip === undefined ? props['aria-label'] : tooltip\n    return tooltipContent ? (\n        <Tooltip content={tooltipContent}>{buttonElement}</Tooltip>\n    ) : (\n        buttonElement\n    )\n})\n\nexport type { ButtonProps, IconButtonProps, ButtonVariant, ButtonTone }\nexport { Button, IconButton }\n"],"names":["preventDefault","event","Button","React","forwardRef","ref","variant","tone","size","shape","type","disabled","loading","tooltip","render","onClick","exceptionallySetClassName","children","startIcon","endIcon","width","align","_ref","props","_objectWithoutProperties","objectWithoutProperties","_excluded","isDisabled","buttonElement","createElement","Role","button","_objectSpread","objectSpread2","undefined","aria-disabled","className","classNames","getBoxClassNames","styles","baseButton","Fragment","Box","display","aria-hidden","Spinner","as","label","overflow","textAlign","Tooltip","content","IconButton","icon","_ref2","_excluded2","iconButton","tooltipContent"],"mappings":"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"}