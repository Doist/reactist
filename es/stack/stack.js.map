{"version":3,"file":"stack.js","sources":["../../src/stack/stack.tsx"],"sourcesContent":["import * as React from 'react'\nimport flattenChildren from 'react-keyed-flatten-children'\nimport { polymorphicComponent } from '../utils/polymorphism'\nimport { mapResponsiveProp } from '../utils/responsive-props'\nimport { Box } from '../box'\nimport { Divider } from '../divider'\n\nimport type { ResponsiveProp } from '../utils/responsive-props'\nimport type { DividerWeight, Space } from '../utils/common-types'\nimport type { BoxProps, ReusableBoxProps } from '../box'\n\ntype Align = 'start' | 'center' | 'end'\n\ninterface StackProps extends ReusableBoxProps {\n    /** Space between items */\n    space?: ResponsiveProp<Space>\n    /** Align items horizontally */\n    align?: ResponsiveProp<Align>\n    /** The weight of the dividers to add. Defaults to 'none', which means no dividers are added */\n    dividers?: DividerWeight\n}\n\nconst Stack = polymorphicComponent<'div', StackProps>(function Stack(\n    {\n        as,\n        space,\n        align,\n        dividers = 'none',\n        width = 'full',\n        children,\n        exceptionallySetClassName,\n        ...props\n    },\n    ref,\n) {\n    const alignItems: BoxProps['alignItems'] =\n        align === undefined\n            ? undefined\n            : mapResponsiveProp(align, (align) =>\n                  align === 'start' ? 'flexStart' : align === 'end' ? 'flexEnd' : 'center',\n              )\n\n    return (\n        <Box\n            {...props}\n            display=\"flex\"\n            flexDirection=\"column\"\n            width={width}\n            alignItems={alignItems}\n            gap={space}\n            as={as}\n            className={exceptionallySetClassName}\n            ref={ref}\n        >\n            {dividers !== 'none'\n                ? React.Children.map(flattenChildren(children), (child, index) =>\n                      index > 0 ? (\n                          <>\n                              <Divider weight={dividers} />\n                              {child}\n                          </>\n                      ) : (\n                          child\n                      ),\n                  )\n                : children}\n        </Box>\n    )\n})\n\nexport type { StackProps }\nexport { Stack }\n"],"names":["Stack","polymorphicComponent","ref","as","space","align","dividers","width","children","exceptionallySetClassName","props","alignItems","undefined","mapResponsiveProp","React","createElement","Box","display","flexDirection","gap","className","Children","map","flattenChildren","child","index","Fragment","Divider","weight"],"mappings":";;;;;;;;;AAsBMA,MAAAA,KAAK,gBAAGC,oBAAoB,CAAoB,SAASD,KAAT,CAAA,IAAA,EAWlDE,GAXkD,EAW/C;EAAA,IAVH;IACIC,EADJ;IAEIC,KAFJ;IAGIC,KAHJ;AAIIC,IAAAA,QAAQ,GAAG,MAJf;AAKIC,IAAAA,KAAK,GAAG,MALZ;IAMIC,QANJ;AAOIC,IAAAA,yBAAAA;GAGD,GAAA,IAAA;AAAA,MAFIC,KAEJ,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;EAEH,MAAMC,UAAU,GACZN,KAAK,KAAKO,SAAV,GACMA,SADN,GAEMC,iBAAiB,CAACR,KAAD,EAASA,KAAD,IACrBA,KAAK,KAAK,OAAV,GAAoB,WAApB,GAAkCA,KAAK,KAAK,KAAV,GAAkB,SAAlB,GAA8B,QADnD,CAH3B,CAAA;AAOA,EAAA,oBACIS,KAAC,CAAAC,aAAD,CAACC,GAAD,oCACQN,KADR,CAAA,EAAA,EAAA,EAAA;AAEIO,IAAAA,OAAO,EAAC,MAFZ;AAGIC,IAAAA,aAAa,EAAC,QAHlB;AAIIX,IAAAA,KAAK,EAAEA,KAJX;AAKII,IAAAA,UAAU,EAAEA,UALhB;AAMIQ,IAAAA,GAAG,EAAEf,KANT;AAOID,IAAAA,EAAE,EAAEA,EAPR;AAQIiB,IAAAA,SAAS,EAAEX,yBARf;AASIP,IAAAA,GAAG,EAAEA,GAAAA;AATT,GAAA,CAAA,EAWKI,QAAQ,KAAK,MAAb,GACKQ,KAAK,CAACO,QAAN,CAAeC,GAAf,CAAmBC,eAAe,CAACf,QAAD,CAAlC,EAA8C,CAACgB,KAAD,EAAQC,KAAR,KAC1CA,KAAK,GAAG,CAAR,gBACIX,KAAA,CAAAC,aAAA,CAAAD,KAAA,CAAAY,QAAA,EAAA,IAAA,eACIZ,KAAA,CAAAC,aAAA,CAACY,OAAD,EAAQ;AAACC,IAAAA,MAAM,EAAEtB,QAAAA;GAAjB,CADJ,EAEKkB,KAFL,CADJ,GAMIA,KAPR,CADL,GAWKhB,QAtBV,CADJ,CAAA;AA0BH,CA9CiC;;;;"}