{"version":3,"file":"alert.js","sources":["../../src/alert/alert.tsx"],"sourcesContent":["import * as React from 'react'\nimport { getClassNames } from '../utils/responsive-props'\nimport { Box } from '../box'\nimport { Button } from '../button'\nimport { Columns, Column } from '../columns'\n\nimport { AlertIcon } from '../icons/alert-icon'\nimport { CloseIcon } from '../icons/close-icon'\n\nimport styles from './alert.module.css'\n\nimport type { AlertTone } from '../utils/common-types'\n\ntype AllOrNone<T> = T | { [K in keyof T]?: never }\n\ntype AlertCloseProps = AllOrNone<{\n    closeLabel: string\n    onClose: () => void\n}>\n\ntype AlertProps = {\n    id?: string\n    children: React.ReactNode\n    tone: AlertTone\n} & AlertCloseProps\n\nfunction Alert({ id, children, tone, closeLabel, onClose }: AlertProps) {\n    return (\n        <Box\n            id={id}\n            role=\"alert\"\n            aria-live=\"polite\"\n            borderRadius=\"full\"\n            className={[styles.container, getClassNames(styles, 'tone', tone)]}\n        >\n            <Columns space=\"small\" alignY=\"center\">\n                <Column width=\"content\">\n                    <AlertIcon tone={tone} className={styles.icon} />\n                </Column>\n                <Column>\n                    <Box\n                        paddingY=\"xsmall\"\n                        paddingRight={onClose != null && closeLabel != null ? undefined : 'small'}\n                    >\n                        {children}\n                    </Box>\n                </Column>\n                {onClose != null && closeLabel != null ? (\n                    <Column width=\"content\">\n                        <Button\n                            variant=\"quaternary\"\n                            size=\"small\"\n                            onClick={onClose}\n                            aria-label={closeLabel}\n                            icon={<CloseIcon />}\n                            style={{\n                                // @ts-expect-error not sure how to make TypeScript understand custom CSS properties\n                                '--reactist-btn-hover-fill': 'transparent',\n                            }}\n                        />\n                    </Column>\n                ) : null}\n            </Columns>\n        </Box>\n    )\n}\n\nexport { Alert }\nexport type { AlertProps }\n"],"names":["Alert","id","children","tone","closeLabel","onClose","React","createElement","Box","role","borderRadius","className","styles","container","getClassNames","Columns","space","alignY","Column","width","AlertIcon","icon","paddingY","paddingRight","undefined","Button","variant","size","onClick","CloseIcon","style"],"mappings":";;;;;;;;;AA0BA,SAASA,KAAT,CAAe;EAAEC,EAAF;EAAMC,QAAN;EAAgBC,IAAhB;EAAsBC,UAAtB;AAAkCC,EAAAA,OAAAA;AAAlC,CAAf,EAAsE;AAClE,EAAA,oBACIC,KAAA,CAAAC,aAAA,CAACC,GAAD,EAAI;AACAP,IAAAA,EAAE,EAAEA,EADJ;AAEAQ,IAAAA,IAAI,EAAC,OAFL;AAGU,IAAA,WAAA,EAAA,QAHV;AAIAC,IAAAA,YAAY,EAAC,MAJb;AAKAC,IAAAA,SAAS,EAAE,CAACC,gBAAM,CAACC,SAAR,EAAmBC,aAAa,CAACF,gBAAD,EAAS,MAAT,EAAiBT,IAAjB,CAAhC,CAAA;AALX,GAAJ,eAOIG,KAAC,CAAAC,aAAD,CAACQ,OAAD;AAASC,IAAAA,KAAK,EAAC;AAAQC,IAAAA,MAAM,EAAC,QAAA;GAA9B,eACIX,KAAA,CAAAC,aAAA,CAACW,MAAD,EAAO;AAACC,IAAAA,KAAK,EAAC,SAAA;AAAP,GAAP,eACIb,KAAA,CAAAC,aAAA,CAACa,SAAD,EAAU;AAACjB,IAAAA,IAAI,EAAEA,IAAP;IAAaQ,SAAS,EAAEC,gBAAM,CAACS,IAAAA;AAA/B,GAAV,CADJ,CADJ,eAIIf,KAAA,CAAAC,aAAA,CAACW,MAAD,EAAO,IAAP,eACIZ,KAAC,CAAAC,aAAD,CAACC,GAAD,EACI;AAAAc,IAAAA,QAAQ,EAAC,QAAT;IACAC,YAAY,EAAElB,OAAO,IAAI,IAAX,IAAmBD,UAAU,IAAI,IAAjC,GAAwCoB,SAAxC,GAAoD,OAAA;AADlE,GADJ,EAIKtB,QAJL,CADJ,CAJJ,EAYKG,OAAO,IAAI,IAAX,IAAmBD,UAAU,IAAI,IAAjC,gBACGE,KAAC,CAAAC,aAAD,CAACW,MAAD,EAAQ;AAAAC,IAAAA,KAAK,EAAC,SAAA;AAAN,GAAR,eACIb,KAAC,CAAAC,aAAD,CAACkB,MAAD;AACIC,IAAAA,OAAO,EAAC;AACRC,IAAAA,IAAI,EAAC;AACLC,IAAAA,OAAO,EAAEvB;AAAO,IAAA,YAAA,EACJD;IACZiB,IAAI,eAAEf,mBAAA,CAACuB,SAAD,EAAU,IAAV;AACNC,IAAAA,KAAK,EAAE;AACH;MACA,2BAA6B,EAAA,aAAA;AAF1B,KAAA;GANX,CADJ,CADH,GAcG,IA1BR,CAPJ,CADJ,CAAA;AAsCH;;;;"}