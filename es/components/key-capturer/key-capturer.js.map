{"version":3,"file":"key-capturer.js","sources":["../../../src/components/key-capturer/key-capturer.tsx"],"sourcesContent":["import * as React from 'react'\n\ntype Key = 'ArrowUp' | 'ArrowRight' | 'ArrowDown' | 'ArrowLeft' | 'Enter' | 'Backspace' | 'Escape'\n\nconst SUPPORTED_KEYS: Record<string, Key> = {\n    ARROW_UP: 'ArrowUp',\n    ARROW_RIGHT: 'ArrowRight',\n    ARROW_DOWN: 'ArrowDown',\n    ARROW_LEFT: 'ArrowLeft',\n    ENTER: 'Enter',\n    BACKSPACE: 'Backspace',\n    ESCAPE: 'Escape',\n}\n\nconst KeyCapturerResolver = {\n    resolveByKey(eventKey: string): Key | null {\n        switch (eventKey) {\n            case 'Left': // IE specific\n            case 'ArrowLeft': {\n                return 'ArrowLeft'\n            }\n            case 'Up': // IE specific\n            case 'ArrowUp': {\n                return 'ArrowUp'\n            }\n            case 'Right': // IE specific\n            case 'ArrowRight': {\n                return 'ArrowRight'\n            }\n            case 'Down': // IE specific\n            case 'ArrowDown': {\n                return 'ArrowDown'\n            }\n            case 'Enter': {\n                return 'Enter'\n            }\n            case 'Backspace': {\n                return 'Backspace'\n            }\n            case 'Esc': // IE specific\n            case 'Escape': {\n                return 'Escape'\n            }\n            default: {\n                return null\n            }\n        }\n    },\n\n    resolveByKeyCode(keyCode: number): Key | null {\n        switch (keyCode) {\n            case 37: {\n                return 'ArrowLeft'\n            }\n            case 38: {\n                return 'ArrowUp'\n            }\n            case 39: {\n                return 'ArrowRight'\n            }\n            case 40: {\n                return 'ArrowDown'\n            }\n            case 13: {\n                return 'Enter'\n            }\n            case 8: {\n                return 'Backspace'\n            }\n            case 27: {\n                return 'Escape'\n            }\n            default: {\n                return null\n            }\n        }\n    },\n}\n\ntype EventHandler = (event: React.SyntheticEvent) => void\n\ntype EventHandlerProps = {\n    onArrowUp?: EventHandler\n    onArrowDown?: EventHandler\n    onArrowLeft?: EventHandler\n    onArrowRight?: EventHandler\n    onEnter?: EventHandler\n    onBackspace?: EventHandler\n    onEscape?: EventHandler\n}\n\ntype PropagateProps = {\n    propagateArrowUp?: boolean\n    propagateArrowDown?: boolean\n    propagateArrowLeft?: boolean\n    propagateArrowRight?: boolean\n    propagateEnter?: boolean\n    propagateBackspace?: boolean\n    propagateEscape?: boolean\n}\n\nconst keyEventHandlerMapping: Record<Key, keyof EventHandlerProps> = {\n    ArrowUp: 'onArrowUp',\n    ArrowDown: 'onArrowDown',\n    ArrowLeft: 'onArrowLeft',\n    ArrowRight: 'onArrowRight',\n    Enter: 'onEnter',\n    Backspace: 'onBackspace',\n    Escape: 'onEscape',\n}\n\nconst keyPropagatePropMapping: Record<Key, keyof PropagateProps> = {\n    ArrowUp: 'propagateArrowUp',\n    ArrowDown: 'propagateArrowDown',\n    ArrowLeft: 'propagateArrowLeft',\n    ArrowRight: 'propagateArrowRight',\n    Enter: 'propagateEnter',\n    Backspace: 'propagateBackspace',\n    Escape: 'propagateEscape',\n}\n\ntype KeyCapturerProps = EventHandlerProps &\n    PropagateProps & {\n        eventName?: 'onKeyDown' | 'onKeyDownCapture' | 'onKeyUp' | 'onKeyUpCapture'\n        children: React.ReactElement<unknown>\n    }\n\n/**\n * Use this component to wrap anything you want to handle key events for (e.g. an input).\n * You can specify the `eventName` to capture (defaults to `onKeyDown`).\n * Check the SUPPORTED_KEYS map to see which keys are supported and supply the respective\n * `on${Key}` prop (i.e. `onEnter` or `onArrowDown`).\n * If you want the default behaviour to be preserved (i.e. only want to hook into the event\n * instead of replacing it) set the `propagate${Key}` prop (e.g. propagateBackspace).\n */\nfunction KeyCapturer(props: KeyCapturerProps) {\n    const { children, eventName = 'onKeyDown' } = props\n    const composingRef = React.useRef(false)\n    const composingEventHandlers = props.onEnter\n        ? {\n              onCompositionStart: () => {\n                  composingRef.current = true\n              },\n              onCompositionEnd: () => {\n                  composingRef.current = false\n              },\n          }\n        : undefined\n\n    function handleKeyEvent(event: React.KeyboardEvent<HTMLInputElement>) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n        const key =\n            event.key !== undefined\n                ? KeyCapturerResolver.resolveByKey(event.key)\n                : KeyCapturerResolver.resolveByKeyCode(event.keyCode)\n\n        if (!key) return\n        const propagateEvent = props[keyPropagatePropMapping[key]] || false\n        const eventHandler = props[keyEventHandlerMapping[key]]\n\n        if (key === 'Enter' && eventHandler) {\n            if (\n                composingRef.current ||\n                // Safari fires the onCompositionEnd event before the keydown event, so we\n                // have to rely on the 229 keycode, which is Enter when fired from an IME\n                // https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\n                (event.keyCode || event.which) === 229\n            ) {\n                return\n            }\n        }\n\n        if (eventHandler) {\n            eventHandler(event)\n            if (!propagateEvent) {\n                event.preventDefault()\n                event.stopPropagation()\n            }\n        }\n    }\n\n    return React.cloneElement(children, {\n        [eventName]: handleKeyEvent,\n        ...composingEventHandlers,\n    })\n}\n\nexport { KeyCapturer, KeyCapturerResolver, SUPPORTED_KEYS }\n"],"names":["SUPPORTED_KEYS","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","BACKSPACE","ESCAPE","KeyCapturerResolver","resolveByKey","eventKey","resolveByKeyCode","keyCode","keyEventHandlerMapping","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Enter","Backspace","Escape","keyPropagatePropMapping","KeyCapturer","props","children","eventName","composingRef","React","useRef","composingEventHandlers","onEnter","onCompositionStart","current","onCompositionEnd","undefined","handleKeyEvent","event","key","propagateEvent","eventHandler","which","preventDefault","stopPropagation","cloneElement","_objectSpread"],"mappings":"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"}