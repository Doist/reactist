{"version":3,"file":"keyboard-shortcut.js","sources":["../../../src/components/keyboard-shortcut/keyboard-shortcut.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\n\n//\n// Support for setting up how to translate modifiers globally.\n//\n\nlet globalTranslateKey = (key: string) => key\n\ntype TranslateKey = typeof globalTranslateKey\n\nKeyboardShortcut.setTranslateKey = (tr: TranslateKey) => {\n    globalTranslateKey = tr\n}\n\nfunction translateKeyMac(key: string) {\n    switch (key.toLowerCase()) {\n        case 'cmd':\n        case 'mod':\n            return '⌘'\n        case 'control':\n        case 'ctrl':\n            return '⌃'\n        case 'alt':\n            return '⌥'\n        case 'shift':\n            return '⇧'\n        case 'space':\n            return '␣'\n        default:\n            return key\n    }\n}\n\n//\n// Some helpers\n//\n\nfunction capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n}\n\nfunction hasModifiers(str: string) {\n    return /\\b(mod|cmd|ctrl|control|alt|shift)\\b/i.test(str)\n}\n\nfunction isSpecialKey(str: string) {\n    return /^(mod|cmd|ctrl|control|alt|shift|space|super)$/i.test(str)\n}\n\nfunction parseKeys(shortcut: string, isMac: boolean, translateKey: TranslateKey) {\n    const t = isMac ? translateKeyMac : translateKey\n    const _hasModifiers = hasModifiers(shortcut)\n\n    function mapIndividualKey(str: string) {\n        if (isSpecialKey(str)) {\n            return capitalize(t(str))\n        }\n        if (_hasModifiers && str.length === 1) {\n            return str.toUpperCase()\n        }\n        return str\n    }\n\n    if (!isMac) {\n        shortcut = shortcut.replace(/\\b(mod|cmd)\\b/i, 'ctrl')\n    }\n\n    return shortcut.split(/\\s*\\+\\s*/).map(mapIndividualKey)\n}\n\n//\n// The KeyboardShortcut component\n//\n\ntype NativeSpanProps = React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLSpanElement>,\n    HTMLSpanElement\n>\n\ntype Props = Omit<NativeSpanProps, 'children'> & {\n    /**\n     * The shortcut to be represented as markup. It supports an intuitive syntax where you can\n     * combine modifiers (cmd, ctrl, shift, alt) with single keys all concatenated with plus signs.\n     * You can also pass various shortcuts as an array, which will be depicted separated by commas.\n     */\n    children: string | string[]\n    /**\n     * A function that allows you to change how some key names are represented. This may be useful,\n     * for instance, to translate modifier names that are expressed differently in other languages\n     * (e.g. `Ctrl` is named `Strg` in German).\n     *\n     * It defaults to a global version that leaves the key as is. You can pass your version as a\n     * prop, or you can also set your own version of this global default one, so you don't need to\n     * pass your own on each invocation of this component.\n     *\n     * ```js\n     * import { KeyboardShortcut } from '@doist/reactist'\n     * KeyboardShortcut.setTranslateKey = key => { ... }\n     * ```\n     *\n     * Note: When the component detects the macOS operating system it bypasses key translation for\n     * most modifiers and uses macOS-specific symbols. See the `isMac` prop for details.\n     */\n    translateKey?: TranslateKey\n    /**\n     * This prop is not meant to be passed. The component will automatically initialize it to `true`\n     * if it detects that the current browser / operating system is on macOS, in which case modifier\n     * keys are represented using macOS' notation (e.g. ⌘ ⌃ ⌥ ⇧).\n     *\n     * Though it is discouraged, if you don't want this special treatment in macOS, you can pass\n     * `isMac={false}` in all invocations of this component.\n     */\n    isMac?: boolean\n}\n\nfunction KeyboardShortcut({\n    children,\n    className,\n    translateKey = globalTranslateKey,\n    isMac = navigator.platform?.toUpperCase().includes('MAC') ?? false,\n    ...props\n}: Props) {\n    const shortcuts = typeof children === 'string' ? [children] : children\n    return (\n        <span\n            className={classNames('reactist_keyboard_shortcut', className, {\n                'reactist_keyboard_shortcut--macos': isMac,\n            })}\n            {...props}\n        >\n            {shortcuts.map((shortcut, i) => (\n                <React.Fragment key={i}>\n                    {i === 0 ? null : ', '}\n                    <kbd>\n                        {parseKeys(shortcut, isMac, translateKey).map((key, j) => (\n                            <kbd key={j}>{key}</kbd>\n                        ))}\n                    </kbd>\n                </React.Fragment>\n            ))}\n        </span>\n    )\n}\n\nexport { KeyboardShortcut }\n"],"names":["globalTranslateKey","key","KeyboardShortcut","setTranslateKey","tr","translateKeyMac","toLowerCase","capitalize","str","charAt","toUpperCase","slice","hasModifiers","test","isSpecialKey","parseKeys","shortcut","isMac","translateKey","t","_hasModifiers","mapIndividualKey","length","replace","split","map","children","className","navigator","platform","includes","props","shortcuts","React","_objectSpread","classNames","i","createElement","Fragment","j"],"mappings":"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"}