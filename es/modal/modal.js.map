{"version":3,"file":"modal.js","sources":["../../src/modal/modal.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\nimport FocusLock from 'react-focus-lock'\nimport { hideOthers } from 'aria-hidden'\n\nimport { Dialog, DialogOptions, useDialogStore, Portal, PortalOptions } from '@ariakit/react'\n\nimport { CloseIcon } from '../icons/close-icon'\nimport { Column, Columns } from '../columns'\nimport { Inline } from '../inline'\nimport { Divider } from '../divider'\nimport { Box } from '../box'\nimport { IconButtonProps, IconButton } from '../button'\n\nimport styles from './modal.module.css'\nimport type { ObfuscatedClassName } from '../utils/common-types'\nimport { forwardRef } from 'react'\n\ntype ModalWidth = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'full'\ntype ModalHeightMode = 'expand' | 'fitContent'\n\n//\n// ModalContext\n//\n\ntype ModalContextValue = {\n    onDismiss?(this: void): void\n    height: ModalHeightMode\n}\n\nconst ModalContext = React.createContext<ModalContextValue>({\n    onDismiss: undefined,\n    height: 'fitContent',\n})\n\n//\n// Modal container\n//\n\ntype DivProps = Omit<\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n    'className' | 'children' | `aria-label` | `aria-labelledby`\n>\n\nexport interface ModalProps extends DivProps, ObfuscatedClassName {\n    /**\n     * The content of the modal.\n     */\n    children: React.ReactNode\n\n    /**\n     * Whether the modal is open and visible or not.\n     */\n    isOpen: boolean\n\n    /**\n     * Called when the user triggers closing the modal.\n     */\n    onDismiss?(): void\n\n    /**\n     * A descriptive setting for how wide the modal should aim to be, depending on how much space\n     * it has on screen.\n     * @default 'medium'\n     */\n    width?: ModalWidth\n\n    /**\n     * A descriptive setting for how tall the modal should aim to be.\n     *\n     * - 'expand': the modal aims to fill most of the available screen height, leaving only a small\n     *   padding above and below.\n     * - 'fitContent': the modal shrinks to the smallest size that allow it to fit its content.\n     *\n     * In either case, if content does not fit, the content of the main body is set to scroll\n     * (provided you use `ModalBody`) so that the modal never has to strech vertically beyond the\n     * viewport boundaries.\n     *\n     * If you do not use `ModalBody`, the modal still prevents overflow, and you are in charge of\n     * the inner layout to ensure scroll, or whatever other strategy you may want.\n     */\n    height?: ModalHeightMode\n\n    /**\n     * Whether to set or not the focus initially to the first focusable element inside the modal.\n     */\n    autoFocus?: boolean\n\n    /**\n     * Controls if the modal is dismissed when pressing \"Escape\".\n     */\n    hideOnEscape?: DialogOptions['hideOnEscape']\n\n    /**\n     * Controls if the modal is dismissed when clicking outside the modal body, on the overlay.\n     */\n    hideOnInteractOutside?: DialogOptions['hideOnInteractOutside']\n\n    /**\n     * An escape hatch in case you need to provide a custom class name to the overlay element.\n     */\n    exceptionallySetOverlayClassName?: string\n\n    /**\n     * Defines a string value that labels the current modal for assistive technologies.\n     */\n    'aria-label'?: string\n\n    /**\n     * Identifies the element (or elements) that labels the current modal for assistive technologies.\n     */\n    'aria-labelledby'?: string\n\n    /**\n     * An HTML element or a memoized callback function that returns an HTML element to be used as\n     * the portal element. By default, the portal element will be a `div` element appended to the\n     * `document.body`.\n     *\n     * @default HTMLDivElement\n     *\n     * @example\n     * const [portal, setPortal] = useState(null);\n     * <Portal portalElement={portal} />;\n     * <div ref={setPortal} />;\n     *\n     * @example\n     * const getPortalElement = useCallback(() => {\n     *   const div = document.createElement(\"div\");\n     *   const portalRoot = document.getElementById(\"portal-root\");\n     *   portalRoot.appendChild(div);\n     *   return div;\n     * }, []);\n     * <Portal portalElement={getPortalElement} />;\n     */\n    portalElement?: PortalOptions['portalElement']\n}\n\nfunction isNotInternalFrame(element: HTMLElement) {\n    return !(element.ownerDocument === document && element.tagName.toLowerCase() === 'iframe')\n}\n\n/**\n * Renders a modal that sits on top of the rest of the content in the entire page.\n *\n * Follows the WAI-ARIA Dialog (Modal) Pattern.\n *\n * @see ModalHeader\n * @see ModalFooter\n * @see ModalBody\n */\nexport function Modal({\n    isOpen,\n    onDismiss,\n    height = 'fitContent',\n    width = 'medium',\n    exceptionallySetClassName,\n    exceptionallySetOverlayClassName,\n    autoFocus = true,\n    hideOnEscape = true,\n    hideOnInteractOutside = true,\n    children,\n    portalElement,\n    onKeyDown,\n    // @ts-expect-error we want to make sure to not pass it to the Dialog component\n    className,\n    ...props\n}: ModalProps) {\n    const setOpen = React.useCallback(\n        (visible: boolean) => {\n            if (!visible) {\n                onDismiss?.()\n            }\n        },\n        [onDismiss],\n    )\n    const store = useDialogStore({ open: isOpen, setOpen })\n\n    const contextValue: ModalContextValue = React.useMemo(() => ({ onDismiss, height }), [\n        onDismiss,\n        height,\n    ])\n\n    const portalRef = React.useRef<HTMLElement | null>(null)\n    const dialogRef = React.useRef<HTMLDivElement | null>(null)\n    const backdropRef = React.useRef<HTMLDivElement | null>(null)\n    const handleBackdropClick = React.useCallback(\n        (event: React.MouseEvent) => {\n            if (\n                // The focus lock element takes up the same space as the backdrop and is where the event bubbles up from,\n                // so instead of checking the backdrop as the event target, we need to make sure it's just above the dialog\n                !dialogRef.current?.contains(event.target as Node) &&\n                // Events fired from other portals will bubble up to the backdrop, even if it isn't a child in the DOM\n                backdropRef.current?.contains(event.target as Node)\n            ) {\n                event.stopPropagation()\n                onDismiss?.()\n            }\n        },\n        [onDismiss],\n    )\n\n    React.useLayoutEffect(\n        function disableAccessibilityTreeOutside() {\n            if (!isOpen || !portalRef.current) {\n                return\n            }\n\n            return hideOthers(portalRef.current)\n        },\n        [isOpen],\n    )\n\n    const handleKeyDown = React.useCallback(\n        function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n            if (\n                hideOnEscape &&\n                onDismiss != null &&\n                event.key === 'Escape' &&\n                !event.defaultPrevented\n            ) {\n                event.stopPropagation()\n                onDismiss()\n            }\n            onKeyDown?.(event)\n        },\n        [onDismiss, hideOnEscape, onKeyDown],\n    )\n\n    if (!isOpen) {\n        return null\n    }\n\n    return (\n        <Portal portalRef={portalRef} portalElement={portalElement}>\n            <Box\n                data-testid=\"modal-overlay\"\n                data-overlay\n                className={classNames(\n                    styles.overlay,\n                    styles[height],\n                    styles[width],\n                    exceptionallySetOverlayClassName,\n                )}\n                /**\n                 * We're using `onPointerDown` instead of `onClick` to prevent the modal from\n                 * closing when the click starts inside the modal and ends on the backdrop.\n                 */\n                onPointerDown={hideOnInteractOutside ? handleBackdropClick : undefined}\n                ref={backdropRef}\n            >\n                <FocusLock\n                    autoFocus={autoFocus}\n                    whiteList={isNotInternalFrame}\n                    returnFocus={true}\n                    crossFrame={false}\n                >\n                    <Dialog\n                        {...props}\n                        ref={dialogRef}\n                        render={\n                            <Box\n                                borderRadius=\"full\"\n                                background=\"default\"\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                                overflow=\"hidden\"\n                                height={height === 'expand' ? 'full' : undefined}\n                                flexGrow={height === 'expand' ? 1 : 0}\n                            />\n                        }\n                        className={classNames(exceptionallySetClassName, styles.container)}\n                        store={store}\n                        preventBodyScroll\n                        // Disable focus lock as we set up our own using ReactFocusLock\n                        modal={false}\n                        autoFocus={false}\n                        autoFocusOnShow={false}\n                        autoFocusOnHide={false}\n                        // Disable portal and backdrop as we control their markup\n                        portal={false}\n                        backdrop={false}\n                        hideOnInteractOutside={false}\n                        hideOnEscape={false}\n                        onKeyDown={handleKeyDown}\n                    >\n                        <ModalContext.Provider value={contextValue}>\n                            {children}\n                        </ModalContext.Provider>\n                    </Dialog>\n                </FocusLock>\n            </Box>\n        </Portal>\n    )\n}\n\n//\n// ModalCloseButton\n//\n\nexport interface ModalCloseButtonProps\n    extends Omit<\n        IconButtonProps,\n        'type' | 'variant' | 'icon' | 'disabled' | 'loading' | 'tabIndex' | 'ref'\n    > {\n    /**\n     * The descriptive label of the button.\n     */\n    'aria-label': string\n}\n\n/**\n * The close button rendered by ModalHeader. Provided independently so that consumers can customize\n * the button's label.\n *\n * @see ModalHeader\n */\nexport function ModalCloseButton(props: ModalCloseButtonProps) {\n    const { onDismiss } = React.useContext(ModalContext)\n    const [includeInTabOrder, setIncludeInTabOrder] = React.useState(false)\n    const [isMounted, setIsMounted] = React.useState(false)\n\n    React.useEffect(\n        function skipAutoFocus() {\n            if (isMounted) {\n                setIncludeInTabOrder(true)\n            } else {\n                setIsMounted(true)\n            }\n        },\n        [isMounted],\n    )\n\n    return (\n        <IconButton\n            {...props}\n            variant=\"quaternary\"\n            onClick={onDismiss}\n            icon={<CloseIcon />}\n            tabIndex={includeInTabOrder ? 0 : -1}\n        />\n    )\n}\n\n//\n// ModalHeader\n//\n\nexport interface ModalHeaderProps extends DivProps, ObfuscatedClassName {\n    /**\n     * The content of the header.\n     */\n    children: React.ReactNode\n\n    /**\n     * Allows to provide a custom button element, or to omit the close button if set to false.\n     * @see ModalCloseButton\n     */\n    button?: React.ReactNode | boolean\n\n    /**\n     * Whether to render a divider line below the header.\n     * @default false\n     */\n    withDivider?: boolean\n}\n\n/**\n * Renders a standard modal header area with an optional close button.\n *\n * @see Modal\n * @see ModalFooter\n * @see ModalBody\n */\nexport function ModalHeader({\n    children,\n    button = true,\n    withDivider = false,\n    exceptionallySetClassName,\n    ...props\n}: ModalHeaderProps) {\n    return (\n        <>\n            <Box\n                {...props}\n                as=\"header\"\n                paddingLeft=\"large\"\n                paddingRight={button === false || button === null ? 'large' : 'small'}\n                paddingY=\"small\"\n                className={exceptionallySetClassName}\n            >\n                <Columns space=\"large\" alignY=\"center\">\n                    <Column width=\"auto\">{children}</Column>\n                    {button === false || button === null ? (\n                        <div className={styles.headerContent} />\n                    ) : (\n                        <Column\n                            width=\"content\"\n                            exceptionallySetClassName={styles.buttonContainer}\n                            data-testid=\"button-container\"\n                        >\n                            {typeof button === 'boolean' ? (\n                                <ModalCloseButton aria-label=\"Close modal\" autoFocus={false} />\n                            ) : (\n                                button\n                            )}\n                        </Column>\n                    )}\n                </Columns>\n            </Box>\n            {withDivider ? <Divider /> : null}\n        </>\n    )\n}\n\n//\n// ModalBody\n//\n\nexport interface ModalBodyProps extends DivProps, ObfuscatedClassName {\n    /**\n     * The content of the modal body.\n     */\n    children: React.ReactNode\n}\n\n/**\n * Renders the body of a modal.\n *\n * Convenient to use alongside ModalHeader and/or ModalFooter as needed. It ensures, among other\n * things, that the content of the modal body expands or contracts depending on the modal height\n * setting or the size of the content. The body content also automatically scrolls when it's too\n * large to fit the available space.\n *\n * @see Modal\n * @see ModalHeader\n * @see ModalFooter\n */\nexport const ModalBody = forwardRef<HTMLDivElement, ModalBodyProps>(function ModalBody(\n    { exceptionallySetClassName, children, ...props },\n    ref,\n) {\n    const { height } = React.useContext(ModalContext)\n    return (\n        <Box\n            {...props}\n            ref={ref}\n            className={exceptionallySetClassName}\n            flexGrow={height === 'expand' ? 1 : 0}\n            height={height === 'expand' ? 'full' : undefined}\n            overflow=\"auto\"\n        >\n            <Box padding=\"large\" paddingBottom=\"xxlarge\">\n                {children}\n            </Box>\n        </Box>\n    )\n})\n\n//\n// ModalFooter\n//\n\nexport interface ModalFooterProps extends DivProps, ObfuscatedClassName {\n    /**\n     * The contant of the modal footer.\n     */\n    children: React.ReactNode\n    /**\n     * Whether to render a divider line below the footer.\n     * @default false\n     */\n    withDivider?: boolean\n}\n\n/**\n * Renders a standard modal footer area.\n *\n * @see Modal\n * @see ModalHeader\n * @see ModalBody\n */\nexport function ModalFooter({\n    exceptionallySetClassName,\n    withDivider = false,\n    ...props\n}: ModalFooterProps) {\n    return (\n        <>\n            {withDivider ? <Divider /> : null}\n            <Box as=\"footer\" {...props} className={exceptionallySetClassName} padding=\"large\" />\n        </>\n    )\n}\n\n//\n// ModalActions\n//\n\nexport type ModalActionsProps = ModalFooterProps\n\n/**\n * A specific version of the ModalFooter, tailored to showing an inline list of actions (buttons).\n * @see ModalFooter\n */\nexport function ModalActions({ children, ...props }: ModalActionsProps) {\n    return (\n        <ModalFooter {...props}>\n            <Inline align=\"right\" space=\"large\">\n                {children}\n            </Inline>\n        </ModalFooter>\n    )\n}\n"],"names":["ModalContext","React","createContext","onDismiss","undefined","height","isNotInternalFrame","element","ownerDocument","document","tagName","toLowerCase","Modal","isOpen","width","exceptionallySetClassName","exceptionallySetOverlayClassName","autoFocus","hideOnEscape","hideOnInteractOutside","children","portalElement","onKeyDown","className","props","setOpen","useCallback","visible","store","useDialogStore","open","contextValue","useMemo","portalRef","useRef","dialogRef","backdropRef","handleBackdropClick","event","current","contains","target","stopPropagation","useLayoutEffect","disableAccessibilityTreeOutside","hideOthers","handleKeyDown","key","defaultPrevented","createElement","Portal","Box","classNames","styles","overlay","onPointerDown","ref","FocusLock","whiteList","returnFocus","crossFrame","Dialog","render","borderRadius","background","display","flexDirection","overflow","flexGrow","container","preventBodyScroll","modal","autoFocusOnShow","autoFocusOnHide","portal","backdrop","Provider","value","ModalCloseButton","useContext","includeInTabOrder","setIncludeInTabOrder","useState","isMounted","setIsMounted","useEffect","skipAutoFocus","IconButton","variant","onClick","icon","CloseIcon","tabIndex","ModalHeader","button","withDivider","Fragment","as","paddingLeft","paddingRight","paddingY","Columns","space","alignY","Column","headerContent","buttonContainer","Divider","ModalBody","forwardRef","padding","paddingBottom","ModalFooter","_objectSpread","ModalActions","Inline","align"],"mappings":"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"}