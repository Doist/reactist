{"version":3,"file":"use-toasts.js","sources":["../../src/toast/use-toasts.tsx"],"sourcesContent":["import React from 'react'\nimport { Portal } from '@ariakit/react'\n\nimport { generateElementId } from '../utils/common-helpers'\nimport { Box } from '../box'\nimport { Stack } from '../stack'\nimport { isActionObject, StaticToast, StaticToastProps } from './static-toast'\n\nimport styles from './toast.module.css'\n\nimport type { Space } from '../utils/common-types'\nimport { useToastsAnimation } from './toast-animation'\n\n/**\n * The props needed to fire up a new notification toast.\n */\ntype ToastProps = StaticToastProps & {\n    /**\n     * The number of seconds the toast is expected to be shown before it is dismissed automatically,\n     * or false to disable auto-dismiss.\n     *\n     * It defaults to whatever is the autoDismissDelay set in the ToastsProvider.\n     */\n    autoDismissDelay?: number | false\n\n    /**\n     * The label for the button that dismisses the toast.\n     *\n     * It defaults to the value set in the ToastsProvider, but individual toasts can have a\n     * different value if needed.\n     */\n    dismissLabel?: string\n\n    /**\n     * Whether to show the dismiss button or not.\n     *\n     * Use this value with care. If combined with disabling `autoDismissDelay`, it may leave you\n     * with toasts that the user won't be able to dismiss at will. It then is your responsibility to\n     * dismiss the toast by calling the function returned by `showToast`.\n     */\n    showDismissButton?: boolean\n}\n\n//\n// InternalToast component and its props\n//\n\ntype InternalToastProps = Omit<ToastProps, 'autoDismissDelay' | 'dismissLabel'> &\n    Required<Pick<ToastProps, 'autoDismissDelay' | 'dismissLabel'>> & {\n        toastId: string\n        onRemoveToast: (toastId: string) => void\n    }\n\n/** @private */\nconst InternalToast = React.forwardRef<HTMLDivElement, InternalToastProps>(function InternalToast(\n    {\n        message,\n        description,\n        icon,\n        action,\n        autoDismissDelay,\n        dismissLabel,\n        showDismissButton = true,\n        toastId,\n        onDismiss,\n        onRemoveToast,\n    },\n    ref,\n) {\n    const [timeoutRunning, setTimeoutRunning] = React.useState(Boolean(autoDismissDelay))\n    const timeoutRef = React.useRef<number | undefined>()\n\n    const startTimeout = React.useCallback(function startTimeout() {\n        setTimeoutRunning(true)\n    }, [])\n\n    const stopTimeout = React.useCallback(function stopTimeout() {\n        setTimeoutRunning(false)\n        clearTimeout(timeoutRef.current)\n        timeoutRef.current = undefined\n    }, [])\n\n    const removeToast = React.useCallback(\n        function removeToast() {\n            onRemoveToast(toastId)\n            onDismiss?.()\n        },\n        [onDismiss, onRemoveToast, toastId],\n    )\n\n    React.useEffect(\n        function setupAutoDismiss() {\n            if (!timeoutRunning || !autoDismissDelay) return\n            timeoutRef.current = window.setTimeout(removeToast, autoDismissDelay * 1000)\n            return stopTimeout\n        },\n        [autoDismissDelay, removeToast, stopTimeout, timeoutRunning],\n    )\n\n    /**\n     * If the action is toast action object and not a custom element,\n     * the `onClick` property is wrapped in another handler responsible\n     * for removing the toast when the action is triggered.\n     */\n    const actionWithCustomActionHandler = React.useMemo(() => {\n        if (!isActionObject(action)) {\n            return action\n        }\n\n        return {\n            ...action,\n            onClick: function handleActionClick() {\n                if (!action) {\n                    return\n                }\n\n                action.onClick()\n                removeToast()\n            },\n        }\n    }, [action, removeToast])\n\n    return (\n        <StaticToast\n            ref={ref}\n            message={message}\n            description={description}\n            icon={icon}\n            action={actionWithCustomActionHandler}\n            onDismiss={showDismissButton ? removeToast : undefined}\n            dismissLabel={dismissLabel}\n            // @ts-expect-error\n            onMouseEnter={stopTimeout}\n            onMouseLeave={startTimeout}\n        />\n    )\n})\n\n//\n// Internal state and context\n//\n\ntype InternalToastEntry = Omit<InternalToastProps, 'onRemoveToast'>\ntype ToastsList = readonly InternalToastEntry[]\n\ntype ShowToastAction = (props: ToastProps) => () => void\nconst ToastsContext = React.createContext<ShowToastAction>(() => () => undefined)\n\n/**\n * The props needed by the ToastsProvider component.\n *\n * @see ToastsProvider\n */\ntype ToastsProviderProps = {\n    /**\n     * The default label to apply to toast dismiss buttons.\n     *\n     * This is useful in environments that need locatization, so you do not need to pass the same\n     * translated label every time you trigger a toast.\n     *\n     * However, you can still apply a different label to a specific toast, by passing a different\n     * value when calling showToast.\n     *\n     * @default 'Close'\n     */\n    defaultDismissLabel?: string\n\n    /**\n     * The default number of seconds after which the toast will be dismissed automatically.\n     *\n     * You can pass a different value to a specific toast when calling `showToast`. You can even\n     * pass `false` if you want a certain toast to never be dismissed automatically.\n     *\n     * @default 10 (seconds)\n     */\n    defaultAutoDismissDelay?: number\n\n    /**\n     * The padding used to separate the toasts from the viewport borders.\n     *\n     * @default 'large'\n     */\n    padding?: Space\n\n    /**\n     * The app wrapped by the provider.\n     */\n    children: NonNullable<React.ReactNode>\n\n    /**\n     * Custom classname for the toasts container, if you need to fine-tune the position or other styles\n     */\n    containerClassName?: string\n}\n\n/**\n * Provides the state management and rendering of the toasts currently active.\n *\n * You need to render this near the top of your app components tree, in order to `useToasts`.\n *\n * @see useToasts\n */\nfunction ToastsProvider({\n    children,\n    padding = 'large',\n    defaultAutoDismissDelay = 10 /* seconds */,\n    defaultDismissLabel = 'Close',\n    containerClassName,\n}: ToastsProviderProps) {\n    const [toasts, setToasts] = React.useState<ToastsList>([])\n    const { mappedRef, animateRemove } = useToastsAnimation()\n\n    const removeToast = React.useCallback(\n        function onRemoveToast(toastId: string) {\n            animateRemove(toastId, () => {\n                setToasts((list) => {\n                    const index = list.findIndex((n) => n.toastId === toastId)\n                    if (index < 0) return list\n                    const copy = [...list]\n                    copy.splice(index, 1)\n                    return copy\n                })\n            })\n        },\n        [animateRemove],\n    )\n\n    const showToast = React.useCallback(\n        function showToast(props: ToastProps) {\n            const toastId = generateElementId('toast')\n            const newToast: InternalToastEntry = {\n                autoDismissDelay: defaultAutoDismissDelay,\n                dismissLabel: defaultDismissLabel,\n                ...props,\n                toastId,\n            }\n            setToasts((list) => [...list, newToast])\n            return () => removeToast(toastId)\n        },\n        [defaultAutoDismissDelay, defaultDismissLabel, removeToast],\n    )\n\n    return (\n        <ToastsContext.Provider value={showToast}>\n            {children}\n            <Portal>\n                {toasts.length === 0 ? null : (\n                    <Box\n                        className={[styles.stackedToastsView, containerClassName]}\n                        position=\"fixed\"\n                        width=\"full\"\n                        paddingX={padding}\n                        paddingBottom={padding}\n                        data-testid=\"toasts-container\"\n                    >\n                        <Stack space=\"medium\">\n                            {toasts.map(({ toastId, ...props }) => (\n                                <InternalToast\n                                    key={toastId}\n                                    ref={mappedRef(toastId)}\n                                    toastId={toastId}\n                                    onRemoveToast={removeToast}\n                                    {...props}\n                                />\n                            ))}\n                        </Stack>\n                    </Box>\n                )}\n            </Portal>\n        </ToastsContext.Provider>\n    )\n}\n\n/**\n * Provides a function `showToast` that shows a new toast every time you call it.\n *\n * ```jsx\n * const showToast = useToasts()\n *\n * <button onClick={() => showToast({ message: 'Hello' })}>\n *   Say hello\n * </button>\n * ```\n *\n * All toasts fired via this function are rendered in a global fixed location, and stacked one on\n * top of the other.\n *\n * When called, `showToast` returns a function that dismisses the toast when called.\n *\n * @see ToastsProvider\n */\nfunction useToasts() {\n    return React.useContext(ToastsContext)\n}\n\n/**\n * Adds a toast to be rendered, stacked alongside any other currently active toasts.\n *\n * For most situations, you should prefer to use the `showToast` function obtained from `useToasts`.\n * This component is provided for convenience to render toasts in the markup, but it has some\n * peculiarities, which are discussed below.\n *\n * Internally, this calls `showToast`. It is provided for two reasons:\n *\n * 1. Convenience, when you want to fire a toast in markup/jsx code. Keep in mind, though, that\n *    toasts rendered in this way will be removed from view when the context where it is rendered\n *    is unmounted. Unlike toasts fired with `showToast`, which will normally be dismissed, either\n *    by the user or after a delay. They'll still be animated on their way out, though.\n * 2. When combined with disabling dismissing it (e.g. `showDismissButton={false}` and\n *    `autoDismissDelay={false}` it provides a way to show \"permanent\" toasts that only go away when\n *    the component ceases to be rendered).\n *\n * This is useful for cases when the consumer wants to control when a toast is visible, and to keep\n * it visible based on an app-specific condition.\n *\n * Something important to note about this component is that it triggers the toast based on the props\n * passed when first rendered, and it does not update the toast if these props change on subsequent\n * renders. In this sense, this is an imperative component, more than a descriptive one. This is\n * done to simplify the internals, and to keep it in line with how `showToast` works: you fire up a\n * toast imperatively, and you loose control over it. It remains rendered according to the props you\n * first passed.\n *\n * @see useToasts\n */\nfunction Toast(props: ToastProps) {\n    const showToast = useToasts()\n    const propsRef = React.useRef<ToastProps>(props)\n    React.useEffect(() => {\n        const dismissToast = showToast(propsRef.current)\n        return dismissToast\n    }, [showToast])\n    return null\n}\n\nexport { Toast, ToastsProvider, useToasts }\nexport type { ToastProps, ToastsProviderProps }\n"],"names":["InternalToast","React","forwardRef","message","description","icon","action","autoDismissDelay","dismissLabel","showDismissButton","toastId","onDismiss","onRemoveToast","ref","timeoutRunning","setTimeoutRunning","useState","Boolean","timeoutRef","useRef","startTimeout","useCallback","stopTimeout","clearTimeout","current","undefined","removeToast","useEffect","setupAutoDismiss","window","setTimeout","actionWithCustomActionHandler","useMemo","isActionObject","_objectSpread","onClick","handleActionClick","createElement","StaticToast","onMouseEnter","onMouseLeave","ToastsContext","createContext","ToastsProvider","children","padding","defaultAutoDismissDelay","defaultDismissLabel","containerClassName","toasts","setToasts","mappedRef","animateRemove","useToastsAnimation","list","index","findIndex","n","copy","splice","showToast","props","generateElementId","newToast","Provider","value","Portal","length","Box","className","styles","stackedToastsView","position","width","paddingX","paddingBottom","Stack","space","map","key","useToasts","useContext","Toast","propsRef","dismissToast"],"mappings":"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"}