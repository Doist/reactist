{"version":3,"file":"button.js","sources":["../../src/button/button.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\nimport { Role, RoleProps } from '@ariakit/react'\n\nimport { Box, getBoxClassNames } from '../box'\nimport { Spinner } from '../spinner'\nimport { Tooltip, TooltipProps } from '../tooltip'\n\nimport styles from './button.module.css'\n\nimport type { ObfuscatedClassName } from '../utils/common-types'\n\nfunction preventDefault(event: React.SyntheticEvent) {\n    event.preventDefault()\n}\n\ntype ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'quaternary'\ntype ButtonTone = 'normal' | 'destructive'\ntype ButtonSize = 'small' | 'normal' | 'large'\ntype IconElement = React.ReactElement | string\n\ninterface CommonButtonProps\n    extends ObfuscatedClassName,\n        Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'className'>,\n        Pick<RoleProps, 'render'> {\n    /**\n     * The button's variant.\n     */\n    variant: ButtonVariant\n\n    /**\n     * The button's tone.\n     *\n     * @default 'normal'\n     */\n    tone?: ButtonTone\n\n    /**\n     * The button's size.\n     *\n     * @default 'normal'\n     */\n    size?: ButtonSize\n\n    /**\n     * Controls the shape of the button.\n     *\n     * Specifically, it allows to make it have slightly curved corners (the default) vs. having them\n     * fully curved to the point that they are as round as possible.\n     *\n     * In icon-only buttons this allows to have the button be circular.\n     *\n     * @default 'normal'\n     */\n    shape?: 'normal' | 'rounded'\n\n    /**\n     * Whether the button is disabled or not.\n     *\n     * Buttons are disabled using aria-disabled, rather than the HTML disabled attribute. This\n     * allows the buttons to be focusable, which can aid discoverability. This way, users can tab to\n     * the button and read its label, even if they can't activate it.\n     *\n     * It is also convenient when buttons are rendered as a link. Links cannot normally be disabled,\n     * but by using aria-disabled, we can make them behave as if they were.\n     *\n     * The `onClick` handler is automatically prevented when the button is disabled in this way, to\n     * mimic the behavior of a native disabled attribute.\n     *\n     * @default false\n     */\n    disabled?: boolean\n\n    /**\n     * Whether the button is busy/loading.\n     *\n     * A button in this state is functionally and semantically disabled. Visually is does not look\n     * dimmed (as disabled buttons normally do), but it shows a loading spinner instead.\n     *\n     * @default false\n     */\n    loading?: boolean\n\n    /**\n     * A tooltip linked to the button element.\n     */\n    tooltip?: TooltipProps['content']\n\n    /**\n     * The type of the button.\n     *\n     * @default 'button'\n     */\n    type?: 'button' | 'submit' | 'reset'\n}\n\ninterface ButtonProps extends CommonButtonProps {\n    /**\n     * The button label content.\n     */\n    children?: React.ReactNode\n\n    /**\n     * The icon to display at the start of the button (before the label).\n     */\n    startIcon?: IconElement\n\n    /**\n     * The icon to display at the end of the button (after the label).\n     */\n    endIcon?: IconElement\n\n    /**\n     * The width of the button.\n     *\n     * - `'auto'`: The button will be as wide as its content.\n     * - `'full'`: The button will be as wide as its container.\n     *\n     * @default 'auto'\n     */\n    width?: 'auto' | 'full'\n\n    /**\n     * The alignment of the button label inside the button.\n     *\n     * @default 'center'\n     */\n    align?: 'start' | 'center' | 'end'\n}\n\n/**\n * A button element that displays a text label and optionally a start or end icon. It follows the\n * [WAI-ARIA Button Pattern](https://www.w3.org/TR/wai-aria-practices/#button).\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(function Button(\n    {\n        variant,\n        tone = 'normal',\n        size = 'normal',\n        shape = 'normal',\n        type = 'button',\n        disabled = false,\n        loading = false,\n        tooltip,\n        render,\n        onClick,\n        exceptionallySetClassName,\n        children,\n        startIcon,\n        endIcon,\n        width = 'auto',\n        align = 'center',\n        ...props\n    },\n    ref,\n) {\n    const isDisabled = loading || disabled\n    const buttonElement = (\n        <Role.button\n            {...props}\n            render={render}\n            type={render != null ? undefined : type}\n            ref={ref}\n            aria-disabled={isDisabled}\n            onClick={isDisabled ? preventDefault : onClick}\n            className={classNames([\n                getBoxClassNames({ width }),\n                exceptionallySetClassName,\n                styles.baseButton,\n                styles[`variant-${variant}`],\n                styles[`tone-${tone}`],\n                styles[`size-${size}`],\n                shape === 'rounded' ? styles['shape-rounded'] : null,\n                disabled ? styles.disabled : null,\n            ])}\n        >\n            <>\n                {startIcon ? (\n                    <Box display=\"flex\" className={styles.startIcon} aria-hidden>\n                        {loading && !endIcon ? <Spinner /> : startIcon}\n                    </Box>\n                ) : null}\n\n                {children ? (\n                    <Box\n                        as=\"span\"\n                        className={styles.label}\n                        overflow=\"hidden\"\n                        width={width === 'full' ? 'full' : undefined}\n                        textAlign={width === 'auto' ? 'center' : align}\n                    >\n                        {children}\n                    </Box>\n                ) : null}\n\n                {endIcon || (loading && !startIcon) ? (\n                    <Box display=\"flex\" className={styles.endIcon} aria-hidden>\n                        {loading ? <Spinner /> : endIcon}\n                    </Box>\n                ) : null}\n            </>\n        </Role.button>\n    )\n\n    return tooltip ? <Tooltip content={tooltip}>{buttonElement}</Tooltip> : buttonElement\n})\n\ninterface IconButtonProps extends CommonButtonProps {\n    /**\n     * The icon to display inside the button.\n     */\n    icon: IconElement\n\n    /**\n     * The button label.\n     *\n     * It is used for assistive technologies, and it is also shown as a tooltip (if not tooltip is\n     * provided explicitly).\n     */\n    'aria-label': string\n}\n\n/**\n * A button element that displays an icon only, visually, though it is semantically labelled. It\n * also makes sure to always show a tooltip with its label. It follows the\n * [WAI-ARIA Button Pattern](https://www.w3.org/TR/wai-aria-practices/#button).\n */\nconst IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(function IconButton(\n    {\n        variant,\n        tone = 'normal',\n        size = 'normal',\n        shape = 'normal',\n        type = 'button',\n        disabled = false,\n        loading = false,\n        tooltip,\n        render,\n        onClick,\n        exceptionallySetClassName,\n        children,\n        icon,\n        ...props\n    },\n    ref,\n) {\n    const isDisabled = loading || disabled\n    const buttonElement = (\n        <Role.button\n            {...props}\n            render={render}\n            type={render != null ? undefined : type}\n            ref={ref}\n            aria-disabled={isDisabled}\n            onClick={isDisabled ? preventDefault : onClick}\n            className={classNames([\n                exceptionallySetClassName,\n                styles.baseButton,\n                styles[`variant-${variant}`],\n                styles[`tone-${tone}`],\n                styles[`size-${size}`],\n                shape === 'rounded' ? styles['shape-rounded'] : null,\n                styles.iconButton,\n                disabled ? styles.disabled : null,\n            ])}\n        >\n            {(loading && <Spinner />) || icon}\n        </Role.button>\n    )\n\n    const tooltipContent = tooltip === undefined ? props['aria-label'] : tooltip\n    return tooltipContent ? (\n        <Tooltip content={tooltipContent}>{buttonElement}</Tooltip>\n    ) : (\n        buttonElement\n    )\n})\n\nexport type { ButtonProps, IconButtonProps, ButtonVariant, ButtonTone }\nexport { Button, IconButton }\n"],"names":["preventDefault","event","Button","React","forwardRef","ref","variant","tone","size","shape","type","disabled","loading","tooltip","render","onClick","exceptionallySetClassName","children","startIcon","endIcon","width","align","props","isDisabled","buttonElement","createElement","Role","button","_objectSpread","undefined","className","classNames","getBoxClassNames","styles","baseButton","Fragment","Box","display","Spinner","as","label","overflow","textAlign","Tooltip","content","IconButton","icon","iconButton","tooltipContent"],"mappings":"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"}