{"version":3,"file":"password-field.js","sources":["../../src/password-field/password-field.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { PasswordVisibleIcon } from '../icons/password-visible-icon'\nimport { PasswordHiddenIcon } from '../icons/password-hidden-icon'\n\nimport { TextField, TextFieldProps } from '../text-field'\nimport { IconButton } from '../button'\n\nimport type { BaseFieldVariantProps } from '../base-field'\n\ninterface PasswordFieldProps\n    extends Omit<TextFieldProps, 'type' | 'startSlot' | 'endSlot'>,\n        BaseFieldVariantProps {\n    togglePasswordLabel?: string\n    endSlot?: React.ReactElement | string | number\n}\n\nconst PasswordField = React.forwardRef<HTMLInputElement, PasswordFieldProps>(function PasswordField(\n    { togglePasswordLabel = 'Toggle password visibility', endSlot, ...props },\n    ref,\n) {\n    const [isPasswordVisible, setPasswordVisible] = React.useState(false)\n    const Icon = isPasswordVisible ? PasswordVisibleIcon : PasswordHiddenIcon\n    return (\n        <TextField\n            {...props}\n            ref={ref}\n            // @ts-expect-error TextField does not support type=\"password\", so we override the type check here\n            type={isPasswordVisible ? 'text' : 'password'}\n            endSlot={\n                <>\n                    {endSlot}\n                    <IconButton\n                        variant=\"quaternary\"\n                        icon={<Icon aria-hidden />}\n                        aria-label={togglePasswordLabel}\n                        onClick={() => setPasswordVisible((v) => !v)}\n                    />\n                </>\n            }\n        />\n    )\n})\n\nexport { PasswordField }\nexport type { PasswordFieldProps }\n"],"names":["PasswordField","React","forwardRef","ref","togglePasswordLabel","endSlot","props","isPasswordVisible","setPasswordVisible","useState","Icon","PasswordVisibleIcon","PasswordHiddenIcon","TextField","type","createElement","Fragment","IconButton","variant","icon","onClick","v"],"mappings":";;;;;;;;AAiBMA,MAAAA,aAAa,gBAAGC,KAAK,CAACC,UAAN,CAAuD,SAASF,aAAT,CAEzEG,IAAAA,EAAAA,GAFyE,EAEtE;EAAA,IADH;AAAEC,IAAAA,mBAAmB,GAAG,4BAAxB;AAAsDC,IAAAA,OAAAA;GACnD,GAAA,IAAA;AAAA,MAD+DC,KAC/D,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;;EAEH,MAAM,CAACC,iBAAD,EAAoBC,kBAApB,CAAA,GAA0CP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAAhD,CAAA;AACA,EAAA,MAAMC,IAAI,GAAGH,iBAAiB,GAAGI,mBAAH,GAAyBC,kBAAvD,CAAA;AACA,EAAA,oBACIX,mBAAA,CAACY,SAAD,oCACQP,KADR,CAAA,EAAA,EAAA,EAAA;AAEIH,IAAAA,GAAG,EAAEA,GAFT;AAGI;AACAW,IAAAA,IAAI,EAAEP,iBAAiB,GAAG,MAAH,GAAY,UAJvC;AAKIF,IAAAA,OAAO,eACHJ,KAAA,CAAAc,aAAA,CAAAd,KAAA,CAAAe,QAAA,EAAA,IAAA,EACKX,OADL,eAEIJ,KAAA,CAAAc,aAAA,CAACE,UAAD,EAAW;AACPC,MAAAA,OAAO,EAAC,YADD;AAEPC,MAAAA,IAAI,eAAElB,KAAA,CAAAc,aAAA,CAACL,IAAD,EAAK;QAAA,aAAA,EAAA,IAAA;AAAA,OAAL,CAFC;AAGK,MAAA,YAAA,EAAAN,mBAHL;AAIPgB,MAAAA,OAAO,EAAE,MAAMZ,kBAAkB,CAAEa,CAAD,IAAO,CAACA,CAAT,CAAA;AAJ1B,KAAX,CAFJ,CAAA;GAPZ,CAAA,CAAA,CAAA;AAmBH,CAzBqB;;;;"}